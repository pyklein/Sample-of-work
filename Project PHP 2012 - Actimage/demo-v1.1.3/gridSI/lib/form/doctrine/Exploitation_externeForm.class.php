<?php

/**
 * Exploitation_externe form.
 *
 * @package    gridSI
 * @subpackage form
 * @author     Your name here
 * @version    SVN: $Id: sfDoctrineFormTemplate.php 23810 2009-11-12 11:07:44Z Kris.Wallsmith $
 */
class Exploitation_externeForm extends BaseExploitation_externeForm {

  public function __construct($dossierId, $objPartInventive, $object = null, $options = array(), $CSRFSecret = null) {

    $this->objPartInventive = $objPartInventive;
    $this->dossierId = $dossierId;

    parent::__construct($object, $options, $CSRFSecret);
  }

  public function configure() {
    $this->useFields(array('date_versement', 'redevance_id', 'montant'));

    //set widgets
    $this->widgetSchema['date_versement'] = new sfWidgetFormInputJQueryDate();

    $this->widgetSchema['redevance_id'] = new sfWidgetFormDoctrineChoiceParametered(array(
                'model' => $this->getRelatedModelName('Redevance'),
                'add_empty' => libelle('msg_libelle_aucune'),
                'table_method' => array('method' => 'retrieveRedevancesActivesPourRecompenses', 'parameters' => array($this->dossierId, $this->objPartInventive->getId())),
                'method' => 'afficheRedevanceDetaillee'
            ));

    $this->widgetSchema['montant'] = new sfWidgetFormInputHidden();

    //validateurs
    $this->validatorSchema['date_versement'] = new gridValidatorDate(array('required' => true), array('required' => libelle('msg_libelle_date_required')));
    $this->validatorSchema['redevance_id'] = new sfValidatorDoctrineChoice(array('model' => $this->getRelatedModelName('Redevance')), array('required' => libelle('msg_libelle_redevance_required')));

    $this->validatorSchema->setPostValidator(new sfValidatorAnd(array(
                new sfValidatorCallback(array('callback' => array($this, 'checkRedevanceLicense')))
            )));


    //set des libellés
    $this->widgetSchema->setLabels(array(
        'date_versement' => libelle('msg_libelle_recompenses_date_versement'),
        'redevance_id' => libelle('msg_libelle_redevance'),
    ));

    $this->disableLocalCSRFProtection();
    parent::configure();
  }

  public function bind(array $taintedValues = null, array $taintedFiles = null) {

    //recherche de la redevance
    if ($taintedValues['redevance_id'] != null) {

      $objRedevance = RedevanceTable::getInstance()->findOneById($taintedValues['redevance_id']);

      //on divise par 2 le montant car c'est seulement 50% de la somme totale
      $moitieDuMontant = $objRedevance->getMontant() / 2;

      $taintedValues['montant'] = $moitieDuMontant * ($this->objPartInventive->getPartInventive() / 100);
    }

    parent::bind($taintedValues, $taintedFiles);
  }

  /**
   * Permet de vérifier qu'une redevance de type License ne soit pas ajouter 2X la même année.
   * @param object $validator
   * @param string[] $values
   * @return string[]
   * @author Alexandre WETTA
   */
  public function checkRedevanceLicense($validator, $values) {

    $arrExpExterne = Exploitation_externeTable::getInstance()->findByPartInventiveId($this->objPartInventive->getId());

    foreach ($arrExpExterne as $objExpExterne) {
      // si c'est le même ID, on vérifie si les dates sont correctes
      if ($objExpExterne->getRedevanceId() == $values['redevance_id']) {

        //on cherche les années des 2 valeurs pour 'date_versement'
        $anneeExpEnregistree = $objExpExterne->getDateTimeObject('date_versement')->format('Y');
        $arrAnneeExpNouveau = explode('-', $values['date_versement']);
        $anneeExpNouveau = $arrAnneeExpNouveau[0];

        //on converti en timestamp
        $dateExpEnregistree = strtotime($objExpExterne->getDateVersement());
        $dateExpNouveau = strtotime($values['date_versement']);

        // on ajoute les mois supplementaires et on converti
        $moisSupp = sfConfig::get("app_tolerence_date_versement");
        $dateExpEnregistreeModifie = mktime(0, 0, 0, date("n", $dateExpEnregistree) + $moisSupp, date("j", $dateExpEnregistree), date("Y", $dateExpEnregistree));
        $dateExpNouveau = mktime(0, 0, 0, date("n", $dateExpNouveau), date("j", $dateExpNouveau), date("Y", $dateExpNouveau));

        if ($dateExpEnregistreeModifie > $dateExpNouveau) {
          $error = new sfValidatorError($validator, libelle('msg_recompense_redevance_license_doublon_erreur', array($moisSupp)));
          throw new sfValidatorErrorSchema($validator, array('redevance_id' => $error));
        }
      }
    }

    return $values;
  }

}
