<?php


/**
 * Utilisateur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    gridSI
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Utilisateur extends BaseUtilisateur
{


  /**
   * Placeholder au cas où une logique d'activation/désactivation est à implémenter
   *
   * @return boolean true si l'utilisateur est desactivable, false sinon
   *
   * @author Simeon PETEV
   */
  public function estDesactivable()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");
    
    // on ne peut pas désactiver mon compte
    if ($this->getPrimaryKey() == sfContext::getInstance()->getUser()->getUtilisateur()->getPrimaryKey())
    {
      $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
      return false;
    }
    else
    {
      $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
      return true;
    }
  }

  /**
   * Retourn l'e nom'abreviation de l'organisme de Mindef
   *
   * @return string
   *
   * @author Simeon PETEV
   */
  public function getAbreviationOrganismeMindef()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objOrgMinDef = Organisme_mindefTable::getInstance()->getOrganismeMindefAvecCetId($this->getOrganismeMindefId());

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
    
    return ($objOrgMinDef) ? $objOrgMinDef->getAbreviation() : "";
  }

  /**
   * Retourn l'abreviation de l'Entite
   *
   * @return string
   *
   * @author Simeon PETEV
   */
  public function getAbreviationEntite()
  {
    return ($this->getEntite()->getId()) ? $this->getEntite()->getAbreviation() : "";
  }

  /**
   * Permet de convertir un objet au string
   * @return string
   */
  public function __toString()
  {
    return $this->getPrenom()." ".$this->getNom();
  }

  /**
   * Retourn le profil le plus haut niveau de l'utilisateur
   * @param boolean $boolAvecAdministrateur false - prise en compte le profil administrateur
   * @return Profil
   * @author Gabor JAGER
   */
  public function getProfil($boolAvecAdministrateur = false)
  {
    return UtilisateurTable::getInstance()->retrieveProfilPlusHautByUtilisateurId($this->getId(), $boolAvecAdministrateur);
  }

  
  /**
   * Recupere la liste des id des profils de l'utilisateur
   * 
   * @return array de id de profil
   *
   * @author Simeon PETEV
   */
  public function getProfilsIds()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrPofils = $this->getProfils();
    
    $arrProfilsIds = array();

    foreach ($arrPofils as $objProfil)
    {
      $arrProfilsIds[] = $objProfil->getId();
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrProfilsIds;
  }

  /**
   * Verifie si l'utilisateur a ce profil
   *
   * @param string $strConstProfil Un ID de profils - definit comme constante dans profilTable
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function  hasProfil($strConstProfil)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrProfils = $this->getProfils();

    foreach ($arrProfils as $objProfil)
    {
      if ($objProfil->getId() == $strConstProfil)
      {
        $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
        return true;
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return false;
  }

  /**
   * Verifie si l'utilisateur peut gerer le Contact_se
   *
   * @param object $objContactSe Un objet Contact_se
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function peutGererContactSe($objContactSe)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $boolResultat = false;

    $arrProfils = $this->getProfils();

    if (((strcmp($objContactSe->getMetier()->getIntitule(), MetierTable::BPI) == 0) && ($this->hasProfil(ProfilTable::SUP_BPI))) ||
        ((strcmp($objContactSe->getMetier()->getIntitule(), MetierTable::MIP) == 0) && ($this->hasProfil(ProfilTable::SUP_MIP))) ||
        ((strcmp($objContactSe->getMetier()->getIntitule(), MetierTable::MRIS) == 0) && ($this->hasProfil(ProfilTable::SUP_MRIS)))
       )
    {
      $boolResultat = true;
    }
    
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $boolResultat;
  }

  /**
   * Verifie si l'utilisateur a au moins un profil appartenant au metier 
   *
   * @param integer $intIdMetier Le id du metier
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function hasMetier($intIdMetier)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrProfils = $this->getProfils();

    foreach ($arrProfils as $objProfil)
    {
      if ($objProfil->getMetierId() == $intIdMetier)
      {
        $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
        return true;
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
    return false;
  }

  /**
   * Verifie si un utilisateur peur gérer un autre
   *
   * @param object $objUtilisateur un objet Utilisateur
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function isPeutGererUtilisateur($objUtilisateur)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $boolPeutGerer = false;

    if ($this->hasProfil(ProfilTable::ADM))
    {
      $boolPeutGerer=true;
    } else if ($objUtilisateur->hasProfil(ProfilTable::ADM))
    {
      //$boolPeutGerer rest a false
    } else
    {

      $arrProfilsIdsUtilisateurCible = $objUtilisateur->getProfilsIds();

      if ($arrProfilsIdsUtilisateurCible instanceof  sfOutputEscaperArrayDecorator)
      {
        $arrProfilsIdsUtilisateurCible = $arrProfilsIdsUtilisateurCible->getRawValue();
      }

      if ((count(array_intersect($arrProfilsIdsUtilisateurCible, ProfilTable::getProfilsBpi())) > 0) &&
          ($this->hasProfil(ProfilTable::SUP_BPI)))
      {
        $boolPeutGerer=true;
      } else if ((count(array_intersect($arrProfilsIdsUtilisateurCible, ProfilTable::getProfilsMip())) > 0) &&
                 ($this->hasProfil(ProfilTable::SUP_MIP)))
      {
        $boolPeutGerer=true;
      } else if ((count(array_intersect($arrProfilsIdsUtilisateurCible, ProfilTable::getProfilsMris())) > 0) &&
                 ($this->hasProfil(ProfilTable::SUP_MRIS)))
      {
        $boolPeutGerer=true;
      }

    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $boolPeutGerer;
  }


  /**
   * Verifie si un utilisateur peur gérer un autre
   *
   * @param integer $intIdUtilisateur Id utilisateur
   * @return boolean
   */
  public function isPeutGererUtilisateurAvecId($intIdUtilisateur)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objUtilisateur = UtilisateurTable::getInstance()->getUnAvecId($intIdUtilisateur);

    if (!$objUtilisateur->getId())
    {
      $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

      return false;
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
    
    return $this->isPeutGererUtilisateur($objUtilisateur);
  }

  /**
   * Recupere un array de id de profils q'il peur gerer
   *
   * @return array Array de id de profils qu'il peut gerer
   *
   * @author Simeon PETEV
   */
  public function getIdsProfilsGerables()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrProfilsGerables = array();

    if ($this->hasProfil(ProfilTable::ADM))
    {
      $arrProfilsGerables = array_merge(array(ProfilTable::ADM),
                                        ProfilTable::getProfilsBpi(),
                                        ProfilTable::getProfilsMip(),
                                        ProfilTable::getProfilsMris());
    } else
    {
      if ($this->hasProfil(ProfilTable::SUP_BPI))
      {
        $arrProfilsGerables = array_merge($arrProfilsGerables,
                                          ProfilTable::getProfilsBpi());
      }

      if ($this->hasProfil(ProfilTable::SUP_MIP))
      {
        $arrProfilsGerables = array_merge($arrProfilsGerables,
                                          ProfilTable::getProfilsMip());
      }

      if ($this->hasProfil(ProfilTable::SUP_MRIS))
      {
        $arrProfilsGerables = array_merge($arrProfilsGerables,
                                          ProfilTable::getProfilsMris());
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrProfilsGerables;
  }

  /**
   * Recupere les id des profiles ingérables par l'utilisateur
   *
   * @return array Array de id de profils qu'il ne peut pas gerer
   *
   * @author Simeon PETEV
   */
  public function getIdsProfilsIngerables()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrProfilsGerables = $this->getIdsProfilsGerables();

    $arrProfilsTous = array_merge(array(ProfilTable::ADM),
                                        ProfilTable::getProfilsBpi(),
                                        ProfilTable::getProfilsMip(),
                                        ProfilTable::getProfilsMris());

    $arrProfilsIngerables = array_diff($arrProfilsTous, $arrProfilsGerables);

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrProfilsIngerables;
  }

  public function save(Doctrine_Connection $conn = null){
    if (array_key_exists('photographie', $this->getModified())) {
      $this->genererThumbnail();
    }

    $arrModificationsNew = $this->getModified(false);

    //On sauveguarde l'ancienne entité
    if (isset($arrModificationsNew['entite_id']))
    {
      $arrModificationsOld = $this->getModified(true);

      if (isset ($arrModificationsOld['entite_id']))
      {
        $this->setEntiteAncienneId($arrModificationsOld['entite_id']);
      }
    }

    parent::save($conn);
  }

   public function genererThumbnail() {
    $this->logDebug('genererThumbnail début');
    if ($this->getPhotographie() != null
            && strlen($this->getPhotographie()) > 0) {
      $arrThumbs = sfConfig::get("app_photos_thumbnails");

      $this->logDebug('genererThumbnail génération thumbnail');

      $utilPhoto = new UtilPhoto();
      $utilArbo = new ServiceArborescence();
      $utilPhoto->creerThumbnail($utilArbo->getRepertoirePhotosUtilisateurs() . $this->getPhotographie(),
              $arrThumbs["largeur"],
              $arrThumbs["hauteur"],
              $arrThumbs["postfix"]);
    }
    $this->logDebug('genererThumbnail fin');
  }

  public function getTypeInnovateurBySession($idDossierMip,$strTransactionToken){
    $objStatut = Session_innovateur_dossier_mipTable::getInstance()->getSessionByUtilisateurIdAndToken($this->getId(),$strTransactionToken);
    if (count($objStatut) == 0){
      $objStatut = Innovateur_dossier_mipTable::getInstance()->getByDossierAndInnovateur($idDossierMip,$this->getId());
    }
    return $objStatut[0]->getType_innovateur();
  }

  /**
   * Met a jour les information de l'Utilisateur d'apres des informations de LDAP
   * L'objet n'est pas sauvgarder dans cette methode
   *
   * @param array $arrInformationsLdap Array de correspondances LDAP declaré dans app.yml
   *
   * @author Simeon PETEV
   */
  public function mettreAJourInformations($arrInformationsLdap=array())
  {
    if (isset ($arrInformationsLdap['prenom']))
    {
      $this->setPrenom($arrInformationsLdap['prenom']);
    }

    if (isset ($arrInformationsLdap['nom']))
    {
      $this->setNom($arrInformationsLdap['nom']);
    }

    if (isset ($arrInformationsLdap['adresse']))
    {
      $this->setAdressePerso($arrInformationsLdap['adresse']);
    }

    if (isset ($arrInformationsLdap['ville']))
    {
      $objVille = VilleTable::getInstance()->findOneByNom($arrInformationsLdap['ville']);
	  // Patch extension de ville
	  if($objVille == null && ereg(' - ', $arrInformationsLdap['ville']))
	  {
		$objVille = VilleTable::getInstance()->findOneByNom(substr($arrInformationsLdap['ville'], 0, strpos($arrInformationsLdap['ville'], ' - ')));
	  }

      if ($objVille)
      {
        $this->setVille($objVille);
      }
    }

    if (isset ($arrInformationsLdap['Entite']))
    {
      $objEntite = EntiteTable::getInstance()->findOneByIntitule($arrInformationsLdap['Entite']);

      if ($objEntite)
      {
        $this->setEntite($objEntites);
      }
    }

    if (isset ($arrInformationsLdap['Organisme_mindef']))
    {
      $objOrganisme = Organisme_mindefTable::getInstance()->findOneByAbreviation($arrInformationsLdap['Organisme_mindef']);

      if ($objOrganisme)
      {
        $this->setOrganisme_mindef($objOrganisme);
      }
    }

    if (isset ($arrInformationsLdap['Grade']))
    {
      $objGrade = GradeTable::getInstance()->findOneByIntitule($arrInformationsLdap['Grade']);

      if ($objGrade)
      {
        $this->setGrade($objGrade);
      }
    }

    if (isset ($arrInformationsLdap['Civilite']))
    {
      if (strcasecmp($arrInformationsLdap['Civilite'], 'Melle') == 0)
      {
        $arrInformationsLdap['Civilite'] = 'Mlle';
      }
	  if (strcasecmp($arrInformationsLdap['Civilite'], 'Mr') == 0)
      {
        $arrInformationsLdap['Civilite'] = 'M';
      }

      $objCivilite = CiviliteTable::getInstance()->findOneByAbreviation($arrInformationsLdap['Civilite']);

      if ($objCivilite)
      {
        $this->setCivilite($objCivilite);
      }
    }

    if (isset ($arrInformationsLdap['mail']))
    {
      $this->setEmail($arrInformationsLdap['mail']);
    }
	
	if (isset ($arrInformationsLdap['CodePostal']))
    {
      $arrResulataCorrespondances['code_postal_perso'] = $arrInformationsLdap['CodePostal'];
    }
  }
}