<?php

/**
 * Phase_depot_brevet
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    gridSI
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Phase_depot_brevet extends BasePhase_depot_brevet
{
  //Gere les activations/desactivations en cascade
  private $estChangerActivation;

  /**
   * @see BasePhase_depot_brevet
   * @param <type> $table
   * @param <type> $isNewEntry
   */
  public function  __construct($table = null, $isNewEntry = false)
  {
    parent::__construct($table, $isNewEntry);

    $this->estChangerActivation = false;
  }

  public function __toString()
  {
    return $this->getIntitule();
  }
  /**
   * On signale q'il a eu un changement de statut pour que le prochain save()
   * le prend en compte et qu'il cascade les desactivations
   *
   * @author Simeon PETEV
   */
  public function notifierChangementActivation()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $this->estChangerActivation = true;

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
  }

  /**
   * Fonction permettant de trouver si l'enfant existe dans une arborecence.
   *
   * @param integer $intIdPhase Id de la phase vis-à-vis la bese de données
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function estAncesteurDe($intIdPhase)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $boolEstAncesteurDe = false;

    if ($this->getId() == $intIdPhase)
    {
      //On considere que le pere est un fils de lui meme et on interdit l'auto-reference
      $boolEstAncesteurDe = true;
    } else
    {
      $arrEnfants = $this->getSousPhasesDepotBrevet();

      foreach ($arrEnfants as $objEnfant)
      {
        if ($objEnfant->estAncesteurDe($intIdPhase))
        {
          $boolEstAncesteurDe = true;
          break;
        }
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $boolEstAncesteurDe;
  }

  /**
   * Retrouve les IDs des noeud qui peuveve devenir des peres pour un Phase.
   * La verification est basé sur l'etat d'activation de chaque noeud et est fait
   * uniquemet sur le sous-arbre de l'applant de la fonction.
   * 
   * Remarque: si le premiere l'appele est faite sur le root, tous les noed dosponibles
   * sont retourné
   *
   * ATTENTION: Toujours appler la fonction avec un array vide en paramettre.
   *
   * @param integer $intIdPhase ID, vis-à-vis la base de données, de la phase à brancher
   * @param array $arrActuelIds Doit etre toujours un array vide
   * @return array
   *
   * @author Simeon PETEV
   */
  public function retreveIdsNoeudsBranchablesPar($intIdPhase,$arrActuelIds=array())
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    if ($this->getId() != $intIdPhase)
    {
      $arrActuelIds[] = $this->getId();
      $arrEnfants = $this->getSousPhasesDepotBrevet();

      foreach ($arrEnfants as $objEnfant)
      {
        $arrActuelIds = $objEnfant->retreveIdsNoeudsBranchablesPar($intIdPhase,$arrActuelIds);
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrActuelIds;
  }

  /**
   * Propage les desactivations dans l'arbre
   *
   * @param boolean $estActifPere L'etat du pere
   *
   * @author Simeon PETEV
   */
  private function propageEstActifPereDansSousArbre($estActifPere)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    parent::setEstActifPere($estActifPere);

    //On propage le changement de statut uniquement si le noeud courrant est actif
    if ($this->getEstActif())
    {
      $arrSousPhases = $this->getSousPhasesDepotBrevet();

      foreach ($arrSousPhases as $objSousPhase)
      {
        $objSousPhase = $objSousPhase->propageEstActifPereDansSousArbre($estActifPere);
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");
  }

  /**
   * Recupere la profondeur dans l'arbre accutuel
   *
   * @return integer
   *
   * @author Simeon PETEV
   */
  public function getLevel()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    if (($this->getPhaseDepotBrevetId() == null) || ($this->getPhaseDepotBrevetId() == ''))
    {
      $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

      return 0;
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $this->getPhaseDepotBrevet()->getLevel()+1;
  }

  public function getIntituleDansArbre()
  {
    $strIntitule = $this->getIntitule();
    $intLevel = $this->getLevel();

    while ($intLevel > 0)
    {
      $strIntitule = '--'.$strIntitule;
      $intLevel--;
    }

    return $strIntitule;
  }

  /**
   * Recupere les fils en profondeur et les stock dans l'array passé en parametre
   *
   * @param array $arrResultats La ou il faut stoquer les resultats
   *
   * @author Simeon PETEV
   */
  public function getFilsEnProfondeur($doctrineCollectionResultat)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    if(!is_object($doctrineCollectionResultat)){
      $doctrineCollectionResultat = new Doctrine_Collection('Phase_depot_brevet');
      }
   
    $doctrineCollectionResultat->add(Phase_depot_brevetTable::getInstance()->findOneById($this->getId()));
    $arrSousPhases = $this->getSousPhasesDepotBrevet();

    foreach ($arrSousPhases as $objPhase)
    {
      $doctrineCollectionResultat = $objPhase->getFilsEnProfondeur($doctrineCollectionResultat);
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $doctrineCollectionResultat;
  }

  public function  save(Doctrine_Connection $conn = null)
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    //Verifie si l'activation de la phase a été changé
    if ($this->estChangerActivation)
    {
      //Recupere les sous-sous phases directes
      $arrSousPhases = $this->getSousPhasesDepotBrevet();

      foreach ($arrSousPhases as $objSousPhase)
      {
        $objSousPhase->propageEstActifPereDansSousArbre($this->getEstActif());
      }

      $this->estChangerActivation = false;
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    //sauveguarde l'objet et les objet depandants
    parent::save($conn);
  }
}