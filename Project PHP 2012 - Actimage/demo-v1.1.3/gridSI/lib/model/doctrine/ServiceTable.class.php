<?php

/**
 * ServiceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ServiceTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return ServiceTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Service');
  }

  /**
   * Recupere un service actif par son ID
   * @param string $intId identifiant de l'objet
   * @return Service objet trouvé ou null
   * @author Gabor JAGER
   */
  public function getServiceActifById($intId)
  {
    $objService = $this->createQuery()
                       ->where("id = ?", $intId)
                       ->andWhere("est_actif = 1")
                       ->execute();
    $objService = count($objService) > 0 ? $objService[0] : null;
    return $objService;
  }

  /**
   *  Methode retournant la requête doctrine d'entrée triée, crée une requête renvoyant tous les enregistrement si = null;
   * @param DoctrineQuery $objRequeteDoctrine requête à trier
   * @return DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveServices($objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    return $objRequeteDoctrine->orderBy('intitule');
  }

    /**
   *  Methode retournant les services orphelins dans une requête doctrine d'entrée triée, crée une requête renvoyant tous les enregistrement si = null;
   * @param DoctrineQuery $objRequeteDoctrine requête à trier
   * @return DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: Alexandre WETTA
   */
  public function retrieveServiceOrphelin($objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    return $objRequeteDoctrine->andWhere('organisme_id IS NULL')->orderBy('intitule');
  }


  /**
   *  Methode retournant la requête doctrine selectionnant les services d'un organisme donné (triés)
   * @param   string $id identifiant de l'organisme
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function getServiceByOrgId($id) {
    return $this->retrieveServices($this->createQuery('s')->where('s.organisme_id = ?', $id));
  }

  /**
   *  Methode proxy pour retrieveServices() utilisée dans gridAction lors de filtres par modèle relatif
   * @param   DoctrineQuery $objRequeteDoctrine requête à trier
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveQuery($objRequeteDoctrine = null) {
    return $this->retrieveServices($objRequeteDoctrine);
  }

  /**
   *  Methode proxy pour getServiceByTypeId() utilisée dans gridAction lors de filtres par modèle relatif
   * @param   Int $id Identifiant du modèle filtrant
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveByRelationId($id) {
    return $this->getServiceByOrgId($id);
  }

  /**
   * Verifie si un service est compatible avec un organisme
   *
   * @param integer $idService Id du service vis-à-vis la base de données
   * @param integer $idOrganisme Id de l'organisme vis-à-vis la base de données
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function estCompatibleServiceAvecOrganisme($idService, $idOrganisme) {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject()
                    ->where("id" . " = ?", $idService)
                    ->andWhere("organisme_id" . " = ?", $idOrganisme);


    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return ($objQuery->count() > 0) ? true : false;
  }

  /**
   * Verifie si un service est compatible avec une laboratoire
   *
   * @param integer $idService Id du service vis-à-vis la base de données
   * @param integer $idLaboratoire Id de la laboratoire vis-à-vis la base de données
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function estCompatibleServiceAvecLaboratoire($idService, $idLaboratoire) {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = Doctrine_Query::create()
                    ->select("s.id")
                    ->from("Service s")
                    ->addFrom("Laboratoire l")
                    ->where("s.id = ?", $idService)
                    ->andWhere("l.id = ?", $idLaboratoire)
                    ->andWhere("s.organisme_id = l.organisme_id");

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return ($objQuery->count() > 0) ? true : false;
  }

  /**
   * Construit un query qui permet de recupere les services actifs, triés en ordre
   * alphabetique par l'intitulé
   *
   * @return object Doctrine_Query
   */
  public function buildQueryServicesActifsOrdreAscPourSelectBox()
  {
    $arrIdsServicesActifs = array();
    $arrServicesActifs = $this->getQueryObject()->execute();

    foreach ($arrServicesActifs as $objService)
    {
      if ($objService->getEstActifRecursif())
      {
        $arrIdsServicesActifs[] = $objService->getId();
      }
    }

    $objQuery = $this->getQueryObject();

    if (empty ($arrIdsServicesActifs))
    {
      $objQuery = $objQuery->where("id = 0");
    } else
    {
      $objQuery = $objQuery->whereIn("id",$arrIdsServicesActifs);
    }

    $objQuery = $objQuery->orderBy("intitule ASC");

    return $objQuery;
  }

  /**
   * Génère la requête utilisée par le paginateur de la liste des services disponibles dans l'onglet invitations d'une commission
   * @param string $strSessionToken transaction_token correspondant aux opérations en cours
   * @param string $intCommissionId ID de commission
   * @return Doctrine_query requête à passer au paginateur
   * @author Gabor JAGER
   */
  public function retrieveServicesDisponibles($strSessionToken, $intCommissionId)
  {
    $arrServiceFiltre = array();

    // recuperer les IDs des services déja concerné
    $arrServicesConcernes = InvitationTable::getInstance()->getInvitationsServiceByCommission($intCommissionId)->execute();
    foreach($arrServicesConcernes as $objInvitationConcernes)
    {
      $arrServiceFiltre[$objInvitationConcernes->getServiceId()] = $objInvitationConcernes->getServiceId();
    }

    // on supprime les invitations "pas concernés" de la table de session
    $arrInvitationsPasConcernes = Session_invitation_commissionTable::getInstance()->getSessionsInvitationsPasConcernesByToken($strSessionToken);
    foreach ($arrInvitationsPasConcernes as $objSession)
    {
      $objInvitation = $objSession->getInvitation();
      if ($objInvitation->estService() 
              && isset($arrServiceFiltre[$objInvitation->getServiceId()]))
      {
        unset($arrServiceFiltre[$objInvitation->getServiceId()]);
      }
    }

    $objRequeteDoctrine = $this->createQuery('s')
                               ->where('s.est_actif = 1')
                               ->leftJoin('s.Session_invitation_commission i WITH i.service_id = s.id AND i.transaction_token = ?', $strSessionToken)
                               ->andWhere('i.est_concerne = 0 OR i.transaction_token IS NULL');

    if (count($arrServiceFiltre) > 0)
    {
      $objRequeteDoctrine->andWhere('s.id NOT IN ('.implode(",", $arrServiceFiltre).')');
    }

    return $objRequeteDoctrine->orderBy('s.intitule');
  }



  /**
   * Recupere les services regroupés pour un select box
   * @return array $arrResultat[OrganismeAbreviation][ServiceId] = ServiceIntitule
   * @author Gabor JAGER
   */
  public function getServicesGroupes()
  {
    if (sfContext::hasInstance())
    {
      sfContext::getInstance()->getLogger()->debug('ServiceTable->getServicesGroupes() Start');
    }

    $arrResultat = array();

    $arrServices = $this->buildQueryServicesActifsOrdreAscPourSelectBox()->execute();

    foreach ($arrServices as $objService)
    {
      //$arrResultat[$objService->getOrganisme()->getAbreviation()][$objService->getId()] = $objService->getIntitule();
	  $arrResultat[$objService->getOrganisme()->getIntitule()][$objService->getId()] = $objService->getIntitule();
    }

    if (sfContext::hasInstance())
    {
      sfContext::getInstance()->getLogger()->debug('ServiceTable->getServicesGroupes() Fin');
    }

    return $arrResultat;
  }
}
