<?php

/**
 * InventeurTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class InventeurTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object InventeurTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Inventeur');
  }

  /**
   * Permet de recuperer le requet doctrine de la liste des inventeurs dans l'ordre alphabetique
   * @return Doctrine_Query
   * @author Gabor JAGER
   */
  public function retrieveInventeursDansOrdre()
  {
    return $this->createQuery()->orderBy('nom, prenom');
  }

  public function retrieveInventeursDisponibles($strSessionToken, $intId){
    $objRequeteDoctrine = $this->createQuery('i')
                               ->where('i.est_actif = 1')
                               ->leftJoin('i.Session_situation_inventeurs s WITH s.inventeur_id = i.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.part_inventive = 0 OR s.transaction_token is null')
                               ->leftJoin('i.Part_inventive p on p.dossier_bpi_id = ? and p.inventeur_id = i.id',$intId)
                               ->andWhere('p.inventeur_id != i.id OR p.dossier_bpi_id is null')
                               ->orWhere('s.part_inventive = 0')
            ;
    return $objRequeteDoctrine->orderBy('i.nom');
  }
  
  public function retrieveInventeursConcernes($strSessionToken, $intId){
    $objRequeteDoctrine = $this->createQuery('i')
                               ->where('i.est_actif = 1')
                               ->leftJoin('i.Session_situation_inventeurs s WITH s.inventeur_id = i.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.part_inventive !=0 OR s.transaction_token is null')
                               ->leftJoin('i.Part_inventive p on p.inventeur_id = i.id')
                               ->andWhere('p.dossier_bpi_id = ? OR p.dossier_bpi_id is null',$intId)
                               ->andWhere('NOT (p.dossier_bpi_id is null AND s.transaction_token is null)')
                               ->orWhere('s.part_inventive != 0')
            ;
    return $objRequeteDoctrine->orderBy('i.nom');
  }

  public function retrieveInventeursExterieursByDossierId($intDossierBpiId)
  {
    $objRequeteDoctrine = $this->createQuery()
                        ->from('Inventeur i')
                        ->where('i.est_exterieur = 1')
                        ->innerJoin('i.Part_inventive p ON p.inventeur_id = i.id')
                        ->where('p.dossier_bpi_id = ?', $intDossierBpiId);
    return $objRequeteDoctrine->count();
  }
}
