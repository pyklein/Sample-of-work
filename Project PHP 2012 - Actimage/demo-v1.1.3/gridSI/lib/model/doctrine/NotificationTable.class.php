<?php

/**
 * NotificationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class NotificationTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object NotificationTable
     */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('Notification');
  }
  /*
   * Récupere les notifications valides à afficher sur la page d'accueil
   */
  public function getNotificationsAAfficher()
  {
    $q = Doctrine_Query::create()
      -> from ('Notification n')
      -> where ('n.date_debut <= ? AND n.date_fin >= ?', array(date('Y-m-d', time()),date('Y-m-d', time())))
      -> andWhere('n.est_actif = ?',true)
      -> orderBy('date_debut ASC');
      
    return $q ->execute();
  }

  /*
   * Permet de filtrer les notifications selon la validité
   */
  public function getNotificationParValidite($requete,$valeur)
  {
    $rootAlias = $requete->getRootAlias();
    switch ($valeur)
    {
      //validité = passée
      case '0':
        $requete -> andWhere($rootAlias.'.date_fin < ?' , date('Y-m-d H:i:s', time()));
        break;

      //validité = En cours
      case '1':
        $requete -> andWhere($rootAlias.'.date_debut <= ?' , date('Y-m-d H:i:s', time()))
                 -> andWhere($rootAlias.'.date_fin >= ?' , date('Y-m-d H:i:s', time()));
         break;

       //validité = A venir
       case '2':
         $requete -> andWhere($rootAlias.'.date_debut > ?' , date('Y-m-d H:i:s', time()));
         break;
    }
    return $requete;
  }

  public function retrieveNotifications($objRequeteDoctrine = null)
  {
    if ($objRequeteDoctrine == null){
      $objRequeteDoctrine = $this->createQuery();
    }
    return $objRequeteDoctrine->orderBy('created_at');
  }

   /**
   *  Methode retournant la requête doctrine selectionnant les notifications par metier
   * @param   string $id identifiant du metier
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   */
  public function getNotificationsByMetierId($intMetierId) {
    return self::getInstance()->createQuery('n')
            ->where('n.metier_id = ?', $intMetierId);
  }

    /**
   *  Methode proxy pour retrieveNotifications() utilisée dans gridAction lors de filtres par modèle relatif
   * @param   DoctrineQuery $objRequeteDoctrine requête à trier
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveQuery($objRequeteDoctrine = null) {
    return $this->retrieveNotifications($objRequeteDoctrine);
  }

     /**
   *  Methode proxy pour getNoticationsByMetierId() utilisée dans gridAction lors de filtres par modèle relatif
   * @param   Int $id Identifiant du modèle filtrant
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
    * Auteurs: William Richards
   */
  public function retrieveByRelationId($id) {
    return $this->getNoticationsByMetierId($id);
  }
}