<?php

/**
 * Valorisation_bpiTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Valorisation_bpiTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object Valorisation_bpiTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Valorisation_bpi');
  }

  /**
   * Permet de recuperer une valorisation BPI par dossier ID
   * @param integer $intIdDossier
   * @return Valorisation_bpi
   * @author Gabor JAGER
   */
  public function getValorisationBpiByDossierId($intIdDossier)
  {
    $objQuery = $this->getQueryObject()
                     ->where('dossier_bpi_id = ?', $intIdDossier);

    $arrResultat = $objQuery->execute();

    if (count($arrResultat) == 0)
    {
      return null;
    }
    
    return $arrResultat[0];
  }

  /**
   * Enregistre de manière effective les informations recoltées dans la table support
   * @param string $strTransactionToken transaction_token des opérations à sauvegarder
   * @param string $strDossierId identifiant du dossier d'invention traintée
   * @param array $arrValeursValorisationBpi valeurs de formulaire valorisation BPI
   * @author Gabor JAGER
   */
  public function enregistrerModificationSession($strTransactionToken, $strDossierId, array $arrValeursValorisationBpi)
  {
    $objConnection = $this->getConnection();
    $objConnection->beginTransaction();

    try
    {
      // valorisation BPI
      $objValorisationBpi = Valorisation_bpiTable::getInstance()->getValorisationBpiByDossierId($strDossierId);
      if ($objValorisationBpi == null)
      {
        $objValorisationBpi = new Valorisation_bpi();
        $objValorisationBpi->setDossierBpiId($strDossierId);
      }

      // valeurs de formulaire de valorisation BPI
      if (isset($arrValeursValorisationBpi["est_evalue"]))
      {
        $objValorisationBpi->setEstEvalue($arrValeursValorisationBpi["est_evalue"]);
      }
      $objValorisationBpi->setCommentaire($arrValeursValorisationBpi["commentaire"]);

      $objValorisationBpi->save();

      // on supprime les ancien données externes
      $arrValorisationExterne = Valorisation_externeTable::getInstance()->getValorisationsExternesByDossierId($strDossierId);
      foreach($arrValorisationExterne as $objValorisationExterne)
      {
        $objValorisationExterne->delete();
      }

      // copier les données externes
      $arrSessionExterne = Session_valorisation_externeTable::getInstance()->getValorisationsExternesSessionByToken($strTransactionToken);
      foreach($arrSessionExterne as $objSessionExterne)
      {
        $objValorisationExterne = new Valorisation_externe();
        $objValorisationExterne->setContratId($objSessionExterne->getContratId());
        $objValorisationExterne->setOrganismeId($objSessionExterne->getOrganismeId());
        $objValorisationExterne->setStatutValorisationExterneId($objSessionExterne->getStatutValorisationExterneId());
        $objValorisationExterne->setValorisationBpiId($objValorisationBpi->getId());

        $objValorisationExterne->save();
      }

      // on supprime les ancien données internes
      $arrValorisationInterne = Valorisation_interneTable::getInstance()->getValorisationsInternesByDossierId($strDossierId);
      foreach($arrValorisationInterne as $objValorisationInterne)
      {
        $objValorisationInterne->delete();
      }

      // copier les données interne
      $arrSessionInterne = Session_valorisation_interneTable::getInstance()->getValorisationsInternesSessionByToken($strTransactionToken);
      foreach($arrSessionInterne as $objSessionInterne)
      {
        $objValorisationInterne = new Valorisation_interne();
        $objValorisationInterne->setOrganismeMindefId($objSessionInterne->getOrganismeMindefId());
        $objValorisationInterne->setDateDebutExploitation($objSessionInterne->getDateDebutExploitation());
        $objValorisationInterne->setValorisationBpiId($objValorisationBpi->getId());

        $objValorisationInterne->save();
      }

      $objConnection->commit();
    } 
    catch (Exception $ex)
    {
      $objConnection->rollBack();
      throw $ex;
    }
  }
}
