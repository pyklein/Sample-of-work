<?php

/**
 * CommissionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CommissionTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return CommissionTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Commission');
  }

  /**
   *  Fourni des représentants cannoniques pour les années de création (widget Année Filtre)
   * @return DoctrineCollection liste des dossiers représentants canoniques
   *                            des années de création présentes en base
   * Auteur : William RICHARDS
   */
  public function getAnneesCommission() {
    $objRequeteDoctrine = $this->createQuery('d')->orderBy('d.date_debut ASC');
    $arrCommissions = $objRequeteDoctrine->execute();

    $arrAnnees = array();
    $arrCommissionsCanon = new Doctrine_Collection('Commission');


    //recupération de l'année et ajout dans liste des années / liste canonique selon présence
    foreach ($arrCommissions as $objCommission) {
      $annee = $objCommission->getDateTimeObject('date_debut')->format('Y');
      if (!in_array($annee, $arrAnnees)) {
        $arrAnnees[] = $annee;
        $arrCommissionsCanon->add($objCommission);
      }
    }
    return $arrCommissionsCanon;
  }

  /**
   *  Ajoute le filtre par annee à la requête de recherche
   * @param Doctrine_Query  $objRequeteDoctrine   requête envoyée par le filtre
   * @param Id               $id                  Id du dossier Canon pour l'année choisie
   * @return Doctrine_Query                       requête retournée au filtre
   * Auteur : William RICHARDS
   */
  public function appliquerFiltreAnnee(Doctrine_Query $objRequeteDoctrine, $id) {
    $rootAlias = $objRequeteDoctrine->getRootAlias();
    $objCommission = $this->findOneById($id);
    if ($objCommission != false) {
      $annee = $objCommission->getDateTimeObject('date_debut')->format('Y');
      $objRequeteDoctrine->andWhere($rootAlias . '.date_debut >= ?', $annee . '-01-01 00:00:00');
      $objRequeteDoctrine->andWhere($rootAlias . '.date_debut <= ?', $annee + 1 . '-01-01 00:00:00');
    }
    return $objRequeteDoctrine;
  }

  /**
   * Retrouve la commission de sélection pour un dossier (thèse, postdoc, ERE) en fonction de sa date
   * @param String $typeDossierMris Type de dossier MRIS
   * @param Date $dateDossier date du dossier
   *
   * @author Actimage
   */
  public function retrieveCommissionSelection($dateDossier, $typeDossierMris) {

    if($typeDossierMris == 'dossier_these'){
      $typeDossier = Type_dossier_mrisTable::TYPE_THESE;
    }else if ($typeDossierMris == 'dossier_postdoc') {
      $typeDossier = Type_dossier_mrisTable::TYPE_POSTDOC;
    }else if($typeDossierMris == 'dossier_ere'){
      $typeDossier = Type_dossier_mrisTable::TYPE_ERE;
    }

    $arrCommissions = $this->createQuery('c')
                      ->where('c.est_selection = 1')
                      ->andWhere('c.date_debut > ?', $dateDossier)
                      ->andWhere('c.type_dossier_mris_id = ?', $typeDossier)
                      ->orderBy('c.date_debut ASC')
                      ->execute();

    //on récupère la première commission
    if(count($arrCommissions) != 0){
      return $arrCommissions[0];
    }else{
      return null ;
    }
 
    
  }

   /**
   * Retrouve la commission de présélection pour un dossier (thèse, postdoc, ERE) en fonction de sa date
   * @param String $typeDossierMris Type de dossier MRIS
   * @param Date $dateDossier date du dossier
   *
   * @author Actimage
   */
 public function retrieveCommissionPreselection($dateDossier, $typeDossierMris){
   
    if($typeDossierMris == 'dossier_these'){
      $typeDossier = Type_dossier_mrisTable::TYPE_THESE;
    }else if ($typeDossierMris == 'dossier_postdoc') {
      $typeDossier = Type_dossier_mrisTable::TYPE_POSTDOC;
    }else if($typeDossierMris == 'dossier_ere'){
      $typeDossier = Type_dossier_mrisTable::TYPE_ERE;
    }

    $arrCommissions = $this->createQuery('c')
                      ->where('c.est_selection = 0')
                      ->andWhere('c.date_debut > ?', $dateDossier)
                      ->andWhere('c.type_dossier_mris_id = ?', $typeDossier)
                      ->orderBy('c.date_debut ASC')
                      ->execute();

    //on récupère la première commission
    $objCommission = $arrCommissions[0];

    return $objCommission ;
    
 }

}