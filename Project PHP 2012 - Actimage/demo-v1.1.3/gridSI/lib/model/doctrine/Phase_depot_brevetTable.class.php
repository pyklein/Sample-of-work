<?php

/**
 * Phase_depot_brevetTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Phase_depot_brevetTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object Phase_depot_brevetTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Phase_depot_brevet');
    }

  /**
   * Creer une query qui permet de recuperer les phases par ordre descendant
   * de l'intitulé
   *
   * @param boolean $getInactifsAussi Indique s'il faut recupere les inactifs aussi
   * @return Doctrine_Query
   *
   * @author Simeon PETEV
   */
  public function buildQueryPhasesOrdreAscIntitule($getInactifsAussi=true)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject();

    if (!$getInactifsAussi)
    {
      $objQuery = $objQuery
                    ->where('est_actif = 1')
                    ->addWhere('est_actif_pere = 1');
    }

    $objQuery = $objQuery
                    ->orderBy('intitule ASC');

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery;
  }

  /**
   * Recupere les phases triés par ordre alphabetique de leur intitulé
   *
   * @param boolean $getInactifsAussi Indique s'il faut recupere les inactifs aussi
   * @return Doctrine_Collection 
   *
   * @author Simeon PETEV
   */
  public function retrevePhasesOrdreAscIntitule($getInactifsAussi=true)
  {
    return $this->buildQueryPhasesOrdreAscIntitule($getInactifsAussi)->execute();
  }
  

  /**
   * Construit un query qui permet de recupere les phases actifs et triés par
   * ordre alphabetique sur leur intitulé
   *
   * @return Doctrine_Query
   *
   * @author Simeon PETEV
   */
  public function buildQueryPhasesOrdreAscIntitulePourSelecBox($intIdNoeudAcctuel=0)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject();

    if (($intIdNoeudAcctuel != null) && ($intIdNoeudAcctuel != 0))
    {
      $objRoot = Phase_depot_brevetTable::getInstance()->findRoot();

      //On recupere les id branchables (condition actif deja pris en compte)
      $arrIdBranchables = $objRoot->retreveIdsNoeudsBranchablesPar($intIdNoeudAcctuel,array());

      $objQuery = $objQuery
                    ->whereIn('id',$arrIdBranchables)
                    ->orderBy('intitule ASC');
    } else
    {
      $objQuery = $this->buildQueryPhasesOrdreAscIntitule(false);
    }

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery;
  }

  public function retrevePhasesOrdreAscIntitulePourSelecBox($intIdNoeudAcctuel=0)
  {
    return $this->buildQueryPhasesOrdreAscIntitulePourSelecBox($intIdNoeudAcctuel)->execute();
  }

  /**
   * Recupere la phase qui represente la racine de l'arborecence des phases
   *
   * @return object Un objet Phase_depot_brevet
   *
   * @author Simeon PETEV
   */
  public function findRoot()
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject()
                          ->where('phase_depot_brevet_id IS NULL');

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery->fetchOne();
  }

  public function retrevePhasesParcoursProfondeur() {
    $doctrineCollectionResultat = new Doctrine_Collection('Phase_depot_brevet');

    $arrPhasesSansPeres = $this->getInstance()->getQueryObject()->where('phase_depot_brevet_id IS NULL')->execute();

    foreach ($arrPhasesSansPeres as $phaseRoot) {
      $doctrineCollectionResultat = $phaseRoot->getFilsEnProfondeur($doctrineCollectionResultat);
    }

    return $doctrineCollectionResultat;
  }
  
}