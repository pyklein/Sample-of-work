<?php

/**
 * GradeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class GradeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object GradeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Grade');
    }

   /**
   * Verifie si un grade fait partie d'un organisme Mindef
   *
   * @param integer $idGrade Identifiant de grade
   * @param integer $idOrganismeMindef Identifiant Organisme Mindef
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function estCompatibleGradeAvecOrganismeMindef($idGrade,$idOrganismeMindef)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = GradeTable::getInstance()->getQueryObject()
                    ->where("id"." = ?",$idGrade)
                    ->andWhere("organisme_mindef_id"." = ?",$idOrganismeMindef);

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return ($objQuery->count()>0) ? true : false;
  }

  /**
   *  Methode retournant la requête doctrine d'entrée triée, crée une requête renvoyant tous les enregistrement si = null;
   * @param DoctrineQuery $objRequeteDoctrine requête à trier
   * @return DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveGrades($objRequeteDoctrine = null){
    if ($objRequeteDoctrine == null){
      $objRequeteDoctrine = $this->createQuery();
    }
    return $objRequeteDoctrine->orderBy('intitule');
  }

  /**
   *  Methode retournant la requête doctrine selectionnant les grades d'un organisme mindef (triés)
   * @param   string $id identifiant de l'organisme mindef
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function getGradesByOrgMindefId($id){
    return $this->retrieveGrades($this->createQuery('g')->where('g.organisme_mindef_id = ?',$id));
  }

  /**
   * Recupere un grade actif par son ID
   * @param string $intId identifiant de l'objet
   * @return Grade objet trouvé ou null
   * @author Gabor JAGER
   */
  public function getGradeActifById($intId)
  {
    $objGrade = $this->createQuery()
                     ->where("id = ?", $intId)
                     ->andWhere("est_actif = 1")
                     ->execute();
    $objGrade = count($objGrade) > 0 ? $objGrade[0] : null;
    return $objGrade;
  }

  /**
   *  Methode proxy pour retrieveGrades() utilisée dans gridAction lors de filtres par modèle relatif
   * @param   DoctrineQuery $objRequeteDoctrine requête à trier
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveQuery($objRequeteDoctrine = null){
    return $this->retrieveGrades($objRequeteDoctrine);
  }

  /**
   *  Methode proxy pour getGradesByOrgMindefId() utilisée dans gridAction lors de filtres par modèle relatif
   * @param   Int $id Identifiant du modèle filtrant
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveByRelationId($id){
    return $this->getGradesByOrgMindefId($id);
  }


  /**
   * Recupere les grades regroupeés par organismes Mindef et trié par abreviation
   * de tous les deux. Ordre ASC.
   *
   * @param boolean $getInnactifAussi - Si on veut recupere tous les innactif aussi
   * @return object Doctrine_Query permettant de recupere les objet par la suite
   *
   * @author Simeon PETEV
   */
  public function getQueryGradesGroupdByOrgMindefAbr($getInnactifAussi=false)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject();

    if ($getInnactifAussi)
    {
      $objQuery = Doctrine_Query::create()
                    ->select("g.id, g.intitule, g.abreviation, e.est_actif, e.organisme_mindef_id")
                    ->from("Grade g, Organisme_mindef om")
                    ->addWhere("g.organisme_mindef_id = om.id")
                    ->addOrderBy("om.abreviation ASC")
                    ->addOrderBy("g.abreviation ASC")
                    ;
    } else
    {
      $objQuery = Doctrine_Query::create()
                    ->select("g.id, g.intitule, g.abreviation, e.est_actif, e.organisme_mindef_id")
                    ->from("Grade g, Organisme_mindef om")
                    ->addWhere("g.organisme_mindef_id = om.id")
                    ->addWhere("g.est_actif = 1")
                    ->addWhere("om.est_actif = 1")
                    ->addOrderBy("om.abreviation ASC")
                    ->addOrderBy("g.abreviation ASC")
                    ;
    }

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery;
  }


  /**
   * Recupere un array associatif des nom des Organismes Mindef et les grades
   * qui leur sont ratachés. Tout trié par ordre alpabetique par abreviation.
   *
   * @param boolean $getInnactifAussi Si on veut recuperer les grades innactif et
   *                                    les organismes innactifs
   * @return array Un array de type array("abrOrgMindef" =>array("idGrade_1"=>"abrGrade_1","idGrade_2"=>"abrGrade_2",...),...)
   *
   * @author Simeon PETEV
   */
  public function getArrAssocOrgMindef($getInnactifAussi=false)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrResultat = array();
    
    $arrGrades = $this->getQueryGradesGroupdByOrgMindefAbr($getInnactifAussi)->execute();
    
    foreach ($arrGrades as $objGrade)
    {
      $arrResultat[Organisme_mindefTable::getInstance()->getOrganismeMindefAvecCetId($objGrade->getOrganismeMindefId())->getAbreviation()][$objGrade->getId()] = $objGrade->getIntitule();
    }

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrResultat;
  }
}