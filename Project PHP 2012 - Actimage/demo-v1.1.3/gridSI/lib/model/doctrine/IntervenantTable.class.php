<?php

/**
 * IntervenantTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class IntervenantTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return IntervenantTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Intervenant');
    }

    /**
     * Recupere un query permettant de recupere les resultats triés par
     * ordre alphabetiqte sur le nom et le prenom
     *
     * @return object Doctrine_Query
     *
     * @author Simeon PETEV
     */
    public function  getQueryIntervenantsOrdreAscNomPrenom()
    {
      if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

      $objQuery = $this->getQueryObject()
                            ->orderBy('nom ASC')
                            ->addOrderBy('prenom ASC');

      if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

      return $objQuery;
    }


    /**
     * Recupere les resultats en ordre alphabetique du nom et le prenom
     *
     * @return array Array d'objets Intervenants
     *
     * @author Simeon PETEV
     */
    public function getIntervenantsOrdreAscNomPrenom()
    {
      return $this->getQueryIntervenantsOrdreAscNomPrenom()->execute();
    }


    public function getUnAvecId($strIdIntervenent)
    {
      $arrIntervenents = $this->getQueryObject()->addWhere("id = ?",$strIdIntervenent)->execute();

      return (!empty ($arrIntervenents) ? $arrIntervenents[0] : (new Intervenant()));
    }

    /**
     * Construit une requete qui permet de recuperer les intervenant qui sont
     * responsables et qui sont actifs, triées par ordre alphabetique sur
     * le nom et le prenom
     *
     * @param array $arrIntervenantsExclus Un array d'objets Intervenants à exclure de la liste
     * @return object Doctrine_Query
     *
     * @author Simeon PETEV
     */
    public function buildQueryIntervenantsActifsResponsablesOrdreAscNomPrenom($arrIntervenantsExclus=array())
    {
      if (sfContext::hasInstance())
        sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

      $objQuery = $this->getQueryObject()
                          ->where('est_responsable = 1')
                          ->addWhere('est_actif = 1')
                          ->orderBy('nom ASC')
                          ->addOrderBy('prenom ASC');

      if (count($arrIntervenantsExclus)>0)
      {
        $arrIdsIntervenants = array();

        foreach ($arrIntervenantsExclus as $objIntervenant)
        {
          //On retient uniquement les id des objet existant dans la base
          if ($objIntervenant->getId() != null)
          {
            $arrIdsIntervenants[] = $objIntervenant->getId();
          }
        }
        
        $objQuery = $objQuery->whereNotIn('id',$arrIdsIntervenants);
      }

      if (sfContext::hasInstance())
        sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

      return $objQuery;
    }


  /**
   * Génère la requête utilisée recuperer les intervenants d'une commission
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author Gabor JAGER
   */
  public function getIntervenantsByCommission($strCommissionId)
  {
    $objRequeteDoctrine = $this->createQuery('i')
                               ->where('i.est_actif = 1')
                               ->leftJoin('i.Commission_intervenant ci on ci.intervenant_id = i.id')
                               ->andWhere('ci.commission_id = ?', $strCommissionId)
                               ->orderBy('i.nom, i.prenom')
            ;
    return $objRequeteDoctrine;
  }

  /**
   *  Génère la requête utilisée par le paginateur de la première liste dans l'onglet gérer les participants mindef d'une commission
   * @param string $strSessionToken   transaction_token correspondant aux opérations en cours
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête à passer au paginateur
   * @author William RICHARDS
   */
   public function retrieveParticipantsCommissionDisponibles($strSessionToken,$strCommissionId){
     $objRequeteDoctrine = $this->createQuery('u')
                               ->where('u.est_actif = 1')
                               ->andWhere('u.est_participant_commission = 1')       
                               ->leftJoin('u.Session_participant_exterieurs_commission s WITH s.intervenant_id = u.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.est_concerne = 0 OR s.transaction_token is null')
                               ->leftJoin('u.Commission_intervenant i on i.commission_id = ? and i.intervenant_id = u.id',$strCommissionId)
                               ->andWhere('i.intervenant_id != u.id OR i.commission_id is null')
                               ->orWhere('s.est_concerne = 0')
            ;
     return $objRequeteDoctrine->orderBy('u.nom');
   }

   /**
   *  Génère la requête utilisée pour la deuxième liste dans l'onglet gérer les participants mindef d'une commission
   * @param string $strSessionToken   transaction_token correspondant aux opérations en cours
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author William RICHARDS
   */
   public function retrieveParticipantsCommissionConcernes($strSessionToken, $strCommissionId){
     $objRequeteDoctrine = $this->createQuery('u')
                               ->where('u.est_actif = 1')
                               ->andWhere('u.est_participant_commission = 1')     
                               ->leftJoin('u.Session_participant_exterieurs_commission s WITH s.intervenant_id = u.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.est_concerne = 1 OR s.transaction_token is null')
                               ->leftJoin('u.Commission_intervenant i on i.intervenant_id = u.id')
                               ->andWhere('i.commission_id = ? OR i.commission_id is null',$strCommissionId)
                               ->andWhere('NOT (i.commission_id is null AND s.transaction_token is null)')
                               ->orWhere('s.est_concerne = ?','1')
            ;
     return $objRequeteDoctrine->orderBy('u.nom');
   }

   /**
   * Permet de construire une query qui va recupere les Intervenants en se basant sur
   * un filtre Intervenant
   *
   * @param object $objFiltreIntervenant IntervenantFilter
   * @return Doctrine_Query
   */
  public function buildQueryAvecFiltre($objFiltreIntervenant)
  {
    $objQuery = $this->getInstance()->getQueryObject();

    $arrValeursFiltre = $objFiltreIntervenant->getValues();

    if (!empty($arrValeursFiltre['nom']["text"])) {
      $objQuery = $objQuery->where("(" . 'nom' . " LIKE ? OR " . 'prenom' . " LIKE ? OR " . 'email' . " LIKE ?)",
                      array("%" . $arrValeursFiltre['nom']["text"] . "%", "%" . $arrValeursFiltre['nom']["text"] . "%", "%" . $arrValeursFiltre['nom']["text"] . "%")
      );
    }

    $objQuery = $objQuery
                    ->orderBy('nom ASC')
                    ->orderBy('prenom ASC')
    ;

    return $objQuery;
  }
}