<?php

/**
 * Part_inventiveTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Part_inventiveTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object Part_inventiveTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Part_inventive');
    }

        /**
   *  Retourne l'enregistrement concernant l'implication d'un participant donnée pour une commission donnée
   * @param string $strInventeurId    Identifiant de l'inventeur
   * @param string $strDossierId      Identifiant du dossier BPI
   * @return Doctrine_collection      Résultats de la requête (0 ou 1 enregistrement si base cohérente)
   */
  public function getByDossierAndInventeur($strInventeurId, $strDossierId) {
    return $this->createQuery('i')->where('i.dossier_bpi_id = ?', $strDossierId)->andWhere('i.inventeur_id = ?', $strInventeurId)->execute();
  }

  /**
   * Retourne la part inventive d'un inventeur sur un dossier Bpi
   * @param int $intInventeurId    Identifiant de l'inventeur
   * @param int $intDossierBpiId   Identifiant du dossier
   * @return Doctrine_collection   Resultats de la requête
   */
  public function getPartInventiveByInventeur($intInventeurId,$intDossierBpiId)
  {
    $objRequete = $this->createQuery('p')->where('p.inventeur_id = ?',$intInventeurId)
                                         ->andWhere('p.dossier_bpi_id = ?',$intDossierBpiId);

    $arrPartInventive=$objRequete->execute();
    return $arrPartInventive;
  }


      /**
   *  Enregistre de manière effective les informations recoltées dans la table support Session_participant_mindef_commissionTable vers Commission_utilisateurTable
   * @param string $strTransactionToken       transaction_token des opérations à sauvegarder
   * @param string $strDossierId              identifiant du dossier d'invention traintée
   * @param Utilisateur $objUtilisateur       utilisateur effectuant les opérations
   */
  public function enregistrerModificationSession($strTransactionToken, $strDossierId, Utilisateur $objUtilisateur) {
    $objEtatSession = Session_situation_inventeursTable::getInstance()->retrieveEtatSession($strTransactionToken);
    $connection = $this->getConnection();
    $connection->beginTransaction();
    //L'enregistrement de ces informations se fait en une seule transaction
    try {
      foreach ($objEtatSession as $objEnregistrement) {
        $strInventeurId = $objEnregistrement->getInventeurId();
        $objInventeurPartInventive = $this->getByDossierAndInventeur($strInventeurId, $strDossierId);

        //cas : Innovateur non concerné au début des opérations d'affectations
        if ($objInventeurPartInventive->count() == 0) {
          //cas : Innovateur concerné après les opérations (on ne fait rien si non concerné)
          if ($objEnregistrement->getPartInventive() > 0) {
            $objNouveauInventeurPartInventive = new Part_inventive();
            $objNouveauInventeurPartInventive->setDossierBpiId($strDossierId);
            $objNouveauInventeurPartInventive->setInventeurId($strInventeurId);
            
            $objNouveauInventeurPartInventive->setPartInventive($objEnregistrement->getPartInventive());
            $objNouveauInventeurPartInventive->save();
          }
          //cas : Innovateur concerné au début des opérations
        } else {
          //cas : Innovateur non concerné après les opérations -> suppression de l'enregistrement innovateur_dossier_mip
          if ($objEnregistrement->getPartInventive() == 0) {
            $objInventeurPartInventive[0]->delete();
          } else { //cas modification de la part inventive
            $objInventeurPartInventive[0]->setPartInventive($objEnregistrement->getPartInventive());
            $objInventeurPartInventive[0]->save();
          }
        }
        //nettoyage de la table support
        $objEnregistrement->delete();
      }
      $objDossier = Dossier_bpiTable::getInstance()->findOneById($strDossierId);
      $objDossier->save();
      $connection->commit();
    } catch (Exception $ex) {
      $connection->rollBack();
      throw $ex;
    }
  }

  /**
   * Retourne les parts inventives d'un dossier et d'un inventeur
   * @param Integer $inventeurId Id de l'inventeur
   * @param Integer $dossierId   Id du dossier BPI
   * @return Doctrine Collection
   */
  public function  retrievePartInventiveByDossierAndInventeur($inventeurId, $dossierId){

    $doctrineQuery = $this->createQuery('p')
            ->where('p.dossier_bpi_id = ?', $dossierId)
            ->andWhere('p.inventeur_id = ?', $inventeurId);

    return $doctrineQuery->execute();
    
  }
}