<?php

/**
 * Convention_organismeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Convention_organismeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object Convention_organismeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Convention_organisme');
    }


  /**
   * Cherche une convention collective par rapport à une date de création d'un dossier, un organisme et à un type de dossier
   * @param date $dateCreation    Date de création du dossier (format Y-m-d)
   * @param integer $organismeId  Id de l'organisme extérieur
   * @param string $type_dossier Type du dossier (Dossier_these, Dossier_postdoc, Dossier_ere)
   * @param integer $typeConventionId Id du type de convention du dossier Mris
   * @return doctrineQuery
   * @author Alexandre WETTA
   */
  public function rechercheConventionCollectiveParDate($dateCreation, $organismeId, $type_dossier, $type_convention = null) {

    if ($type_dossier == 'Dossier_these') {
      $whereDate = "";
      $requeteDoctrine = $this->createQuery('c')
                      ->where('c.date_prise_effet <= ?', $dateCreation)
                      ->andWhere('(c.date_fin_effet >= \''.$dateCreation. '\' OR c.date_fin_effet IS NULL)')
                      ->andWhere('c.organisme_id = ?', $organismeId)
                      ->andWhere('c.type_convention_organisme_id = ?', $type_convention );
    } else if ($type_dossier == 'Dossier_postdoc') {
      $requeteDoctrine = $this->createQuery('c')
                      ->where('c.date_prise_effet <= ?', $dateCreation)
                      ->andWhere('(c.date_fin_effet >= \''.$dateCreation. '\' OR c.date_fin_effet IS NULL)')
                      ->andWhere('c.organisme_id = ?', $organismeId)
                      ->andWhere('c.type_convention_organisme_id = ?', Type_convention_organismeTable::STAGE_POSTDOC);
    } else if ($type_dossier == 'Dossier_ere') {
      $requeteDoctrine = $this->createQuery('c')
                      ->where('c.date_prise_effet <= ?', $dateCreation)
                      ->andWhere('(c.date_fin_effet >= \''.$dateCreation. '\' OR c.date_fin_effet IS NULL)')
                      ->andWhere('c.organisme_id = ?', $organismeId)
                      ->andWhere('c.type_convention_organisme_id = ?', Type_convention_organismeTable::STAGE_ERE);
    }

    return $requeteDoctrine;
  }

    /**
   * Verifie si un organisme et un type de contrat peuvent etre definit dans un
   * espace temps - chevauchements imposibles
   *
   * @param integer $intIdOrganisme Id de l'organisme vis-à-vis la base de données
   * @param integer $intIdTypeConventionOrganisme Id du type de convention  vis-à-vis
   *                                               la base de données
   * @param string $strDateDebut Un string representant une date valide
   * @param string $strDateFin Un string representant une date valide
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function estEnConflit($intIdOrganisme,$intIdTypeConventionOrganisme,$strDateDebut,$strDateFin=null,$intIdConvExclure=null)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $boolResultat = false;

    $objQuery = $this->getInstance()->getQueryObject()
                                            ->where('organisme_id = ?',$intIdOrganisme)
                                            ->addWhere('type_convention_organisme_id = ?',$intIdTypeConventionOrganisme)
    ;

    if ($intIdConvExclure)
    {
      $objQuery = $objQuery->addWhere('id != ?',$intIdConvExclure);
    }

    $arrConventions =$objQuery->execute();

    if ($strDateFin)
    {
      $objDateDebut = new DateTime($strDateDebut);
      $objDateFin   = new DateTime($strDateFin);

      foreach ($arrConventions as $objConvention)
      {
        if ($objConvention->getDateFinEffet())
        {
          $objDateDebutConvIter = new DateTime($objConvention->getDatePriseEffet());
          $objDateFinConvIter   = new DateTime($objConvention->getDateFinEffet());

          if ((($objDateDebutConvIter->diff($objDateDebut)->format('%r%d') >= 0) && ($objDateDebut->diff($objDateFinConvIter)->format('%r%d') >= 0)) ||
              (($objDateDebut->diff($objDateDebutConvIter)->format('%r%d') >= 0) && ($objDateDebutConvIter->diff($objDateFin)->format('%r%d') > 0))
             )
          {
            $boolResultat = true;
            break;
          }
        } else
        {
          $objDateDebutConvIter = new DateTime($objConvention->getDatePriseEffet());

          if ($objDateDebutConvIter->diff($objDateFin)->format('%r%d') > 0)
          {
            $boolResultat = true;
            break;
          }
        }
      }

    } else
    {
      $objDateDebut = new DateTime($strDateDebut);

      foreach ($arrConventions as $objConvention)
      {
        if ($objConvention->getDateFinEffet())
        {
          $objDateFinConvIter   = new DateTime($objConvention->getDateFinEffet());

          if ($objDateDebut->diff($objDateFinConvIter)->format('%r%d') > 0)
          {
            $boolResultat = true;
            break;
          }
        } else
        {
          $boolResultat = true;
          break;
        }
      }
    }

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $boolResultat;
  }
}