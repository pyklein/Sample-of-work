<?php

/**
 * Statut_dossier_mipTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Statut_dossier_mipTable extends Doctrine_Table
{
  const RDV_A_PRENDRE         = "1";
  const ATT_VISITE_INNOV      = "2";
  const DEM_AVIS_EM_A_ENVOYER = "3";
  const ATT_AVIS_EM           = "4";
  const LET_SOUTIEN_A_ENVOYER = "5";
  const ATT_FINANCE           = "6";
  const ATT_EA                = "7";
  const ATT_CR                = "8";
  const EN_ATT_CLOTURE        = "9";
  const FINANCE_CLOS          = "10";
  const ABANDON_CLOS          = "11";
  const TRANSFERE             = "12";
  const ABANDON               = "13";
  const OUVERT_SANS_SUITE     = "14";

  /**
   * Returns an instance of this class.
   *
   * @return object Statut_dossier_mipTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Statut_dossier_mip');
  }

/**
 *  Récupère le statut suivant de celui dont l'ID est passée (NULL accépté) en filtrant ou non les status innactifs
 * @param identifiant $intIdStatut  Identifiant du statut dont on veut trouver le suivant
 * @param bool        $filtreActifs Filtrage ou non des statuts innactifs
 * @return Doctrine_record          Statut recherché (ou false dans le cas ou il n'existe pas)
 */
  public function getNextStatut($intIdStatut, $filtreActifs = false) {
    //Si le statut n'est pas à la racine
    if ($intIdStatut != null) {
      $output = $this->findOneByPrecedentStatutDossierMipId($intIdStatut);
    }
    //Si le statut est à la racine
    else {
      $output = $this->createQuery('s')->where('s.precedent_statut_dossier_mip_id IS NULL')->execute();
      $output = $output[0];
    }
   
    if ($output != false) {
        if ($filtreActifs && !$output->getEstActif()) {
          return $this->getNextStatut($output->getId(), $filtreActifs);
        }
      }
    return $output;
  }

  //récupère tous les statuts de dossier dans l'ordre
  public function retrieveStatutsParOrdre($filtreActifs = false, $intIdCourant = null) {
    $objStatut = $this->findRoot($filtreActifs);
    $collectionStatut = new Doctrine_Collection('Statut_dossier_mip');
    if ($objStatut->getId() != $intIdCourant) {
      $collectionStatut->add($objStatut);
    }
    $boolBoucle = true;

    while ($boolBoucle) {
      $objStatut = $this->getNextStatut($objStatut->getId(), $filtreActifs);


      if ($objStatut == false) {
        $boolBoucle = false;
      } else {
        if ($objStatut->getId() != $intIdCourant) {
          $collectionStatut->add($objStatut);
        }
      }
    }
    return $collectionStatut;
  }

  /**
   *  Récupère le statut racine
   * @param bool prendez le premier ou le premier actif
   * @return Doctrine_Record Statut racine
   */
  public function findRoot($filtreActifs = false) {
    return $this->getNextStatut(null, $filtreActifs);
  }

}