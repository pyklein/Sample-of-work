<?php

/**
 * View_rechercheTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class View_rechercheTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object View_rechercheTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('View_recherche');
  }

  /**
   * Filtre la requête d'affichage des dossiers BPI en fonction des credentials
   * @param Doctrine_Query $objRequete
   * @return Doctrine_Query requête finale
   * @author Gabor JAGER
   */
  public function getRequeteListe(Doctrine_Query $objRequete)
  {
    $objRequete->whereIn("etat_partage_id", array(Etat_partageTable::PARTAGABLE, Etat_partageTable::PARTAGE));
    $objRequete->orderBy('created_at DESC, titre');

    return $objRequete;
  }

  /**
   * Ajoute le filtre l'organisme
   * @param Doctrine_Query $objRequeteDoctrine requête envoyée par le filtre
   * @param integer $intOrganismeId Id de l'organisme
   * @return Doctrine_Query requête retournée au filtre
   * @author Gabor JAGER
   */
  public function appliquerFiltreOrganisme(Doctrine_Query $objRequeteDoctrine, $intOrganismeId)
  {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine = $this->appliquerFiltreJoinsDossiers($objRequeteDoctrine, true);

    $strWhere =
                 "inventeurs.organisme_id = ? ".
                 "OR ere.organisme_id = ? ".
                 "OR postdoc.organisme_id = ? ".
                 "OR these.organisme_id = ? ".
                 "";

    $objRequeteDoctrine->andWhere($strWhere, array(
                                                   $intOrganismeId,
                                                   $intOrganismeId,
                                                   $intOrganismeId,
                                                   $intOrganismeId
                                                ));

    return $objRequeteDoctrine;
  }

  /**
   * Ajoute le filtre l'organisme MINDEF
   * @param Doctrine_Query $objRequeteDoctrine requête envoyée par le filtre
   * @param integer $intOrganismeMindefId Id de l'organisme MINDEF
   * @return Doctrine_Query requête retournée au filtre
   * @author Gabor JAGER
   */
  public function appliquerFiltreOrganismeMindef(Doctrine_Query $objRequeteDoctrine, $intOrganismeMindefId)
  {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine = $this->appliquerFiltreJoinsDossiers($objRequeteDoctrine, true);

    $strWhere =
                 "inventeurs.organisme_mindef_id = ? ".
                 "OR innovateurs.organisme_mindef_id = ? ".
                 "OR ere.organisme_mindef_id = ? ".
                 "OR postdoc.organisme_mindef_id = ? ".
                 "OR these.organisme_mindef_id = ? ".
                 "";

    $objRequeteDoctrine->andWhere($strWhere, array(
                                                   $intOrganismeMindefId,
                                                   $intOrganismeMindefId,
                                                   $intOrganismeMindefId,
                                                   $intOrganismeMindefId,
                                                   $intOrganismeMindefId
                                                ));

    return $objRequeteDoctrine;
  }

  /**
   * Ajoute le filtre numero de dossier
   * @param Doctrine_Query $objRequeteDoctrine requête envoyée par le filtre
   * @param string $strNumeroDossier
   * @return Doctrine_Query requête retournée au filtre
   * @author Gabor JAGER
   */
  public function appliquerFiltreNumeroDossier(Doctrine_Query $objRequeteDoctrine, $strNumeroDossier)
  {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine = $this->appliquerFiltreJoinsDossiers($objRequeteDoctrine);

    $strWhere = "mip.numero LIKE ?
                 OR bpi.numero LIKE ?
                 OR ere.numero_provisoire LIKE ? OR ere.numero_definitif LIKE ?
                 OR postdoc.numero_provisoire LIKE ? OR postdoc.numero_definitif LIKE ?
                 OR these.numero LIKE ?";

    $objRequeteDoctrine->andWhere($strWhere, array('%'.$strNumeroDossier.'%',
                                                   '%'.$strNumeroDossier.'%',
                                                   '%'.$strNumeroDossier.'%',
                                                   '%'.$strNumeroDossier.'%',
                                                   '%'.$strNumeroDossier.'%',
                                                   '%'.$strNumeroDossier.'%',
                                                   '%'.$strNumeroDossier.'%'));
    
    return $objRequeteDoctrine;
  }

  /**
   * Ajoute le filtre nom/prenom/e-mail
   * @param Doctrine_Query $objRequeteDoctrine requête envoyée par le filtre
   * @param string $strNomPrenomEmail
   * @return Doctrine_Query requête retournée au filtre
   * @author Gabor JAGER
   */
  public function appliquerFiltreNomPrenomEmail(Doctrine_Query $objRequeteDoctrine, $strNomPrenomEmail)
  {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine = $this->appliquerFiltreJoinsDossiers($objRequeteDoctrine, true);

    $strWhere =
                 "inventeurs.nom LIKE ? OR inventeurs.prenom LIKE ? OR inventeurs.email LIKE ? OR inventeurs.email_perso LIKE ? ".
                 "OR innovateurs.nom LIKE ? OR innovateurs.nom_jeunefille LIKE ? OR innovateurs.prenom LIKE ? OR innovateurs.email LIKE ? OR innovateurs.email_perso LIKE ? ".
                 "OR ere_etudiant.nom LIKE ? OR ere_etudiant.nom_jeunefille LIKE ? OR ere_etudiant.prenom LIKE ? OR ere_etudiant.email LIKE ? ".
                 "OR postdoc_etudiant.nom LIKE ? OR postdoc_etudiant.nom_jeunefille LIKE ? OR postdoc_etudiant.prenom LIKE ? OR postdoc_etudiant.email LIKE ? ".
                 "OR these_etudiant.nom LIKE ? OR these_etudiant.nom_jeunefille LIKE ? OR these_etudiant.prenom LIKE ? OR these_etudiant.email LIKE ? ".
                 "";
                 
    $objRequeteDoctrine->andWhere($strWhere, array(
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',

                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',

                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',

                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',

                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%',
                                                   '%'.$strNomPrenomEmail.'%'
                                                ));

    return $objRequeteDoctrine;
  }

  /**
   * Effectue les jointures sur les tables des dossiers (et les personnes concernées)
   * @param Doctrine_Query $objRequeteDoctrine
   * @return Doctrine_Query
   * @author Gabor JAGER
   */
  private function appliquerFiltreJoinsDossiers(Doctrine_Query $objRequeteDoctrine, $boolAvecPersonnesConcernees = false)
  {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    if (!$objRequeteDoctrine->contains("mip"))
    {
      $objRequeteDoctrine->leftJoin($rootAlias.'.Dossier_mip mip')
                         ->leftJoin($rootAlias.'.Dossier_bpi bpi')
                         ->leftJoin($rootAlias.'.Dossier_ere ere')
                         ->leftJoin($rootAlias.'.Dossier_postdoc postdoc')
                         ->leftJoin($rootAlias.'.Dossier_these these');
    }

    if ($boolAvecPersonnesConcernees && !$objRequeteDoctrine->contains("inventeurs"))
    {
      $objRequeteDoctrine->leftJoin('bpi.Inventeurs inventeurs')
                         ->leftJoin('mip.Innovateurs innovateurs')
                         ->leftJoin('ere.Etudiant ere_etudiant')
                         ->leftJoin('postdoc.Etudiant postdoc_etudiant')
                         ->leftJoin('these.Etudiant these_etudiant');
    }
    
    return $objRequeteDoctrine;
  }
}
