<?php

/**
 * OrganismeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class OrganismeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object OrganismeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Organisme');
    }

     /**
   *  Methode retournant la requête doctrine d'entrée triée, crée une requête renvoyant tous les enregistrement si = null;
   * @param DoctrineQuery $objRequeteDoctrine requête à trier
   * @return DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function retrieveOrganismes($objRequeteDoctrine = null){
    if ($objRequeteDoctrine == null){
      $objRequeteDoctrine = $this->createQuery();
    }
    return $objRequeteDoctrine->orderBy('intitule');
  }

  /**
   *  Methode retournant la requête doctrine selectionnant les organismes d'un type donné (triés)
   * @param   string $id identifiant du type d'organisme
   * @return  DoctrineQuery requête Doctrine à passer au paginateur ou au filtre
   * Auteurs: William Richards
   */
  public function getOrganismeByTypeId($id){
    return $this->retrieveOrganismes($this->createQuery('o')->where('o.type_organisme_id = ?',$id));
  }


  /**
   * Construit un query permettant de recupere les organismes actifs trié^par
   * ordre alphabetique sur l'intitule
   *
   * @return query Doctrine_Query
   *
   * @author Simeon PETEV
   */
  public function buildQueryOrganismesActifsOrdreAscPourSelectbox()
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject()
                          ->where("est_actif = 1")
                          ->orderBy("intitule ASC");

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");


    return $objQuery;
  }

  public function retrieveCofinanceursDisponibles($strSessionToken, $intId){
    $objRequeteDoctrine = $this->createQuery('i')
                               ->where('i.est_actif = 1')
                               ->leftJoin('i.Session_cofinance_these s WITH s.organisme_id = i.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.part_cofinance = 0 OR s.transaction_token is null')
                               ->leftJoin('i.Cofinance_these p on p.dossier_these_id = ? and p.organisme_id = i.id',$intId)
                               ->andWhere('p.organisme_id != i.id OR p.dossier_these_id is null')
                               ->orWhere('s.part_cofinance = 0')
            ;
    return $objRequeteDoctrine->orderBy('i.intitule');
  }

  public function retrieveCofinanceursConcernes($strSessionToken, $intId){
    $objRequeteDoctrine = $this->createQuery('i')
                               ->where('i.est_actif = 1')
                               ->leftJoin('i.Session_cofinance_these s WITH s.organisme_id = i.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.part_cofinance !=0 OR s.transaction_token is null')
                               ->leftJoin('i.Cofinance_these p on p.organisme_id = i.id')
                               ->andWhere('p.dossier_these_id = ? OR p.dossier_these_id is null',$intId)
                               ->andWhere('NOT (p.dossier_these_id is null AND s.transaction_token is null)')
                               ->orWhere('s.part_cofinance != 0')
            ;
    return $objRequeteDoctrine->orderBy('i.intitule');
  }

  /**
   * Récupere uniquement les organismes où un dossier a été associé
   * @param String $strTypeDossier
   * @return Array Organisme
   */
  public function getOrganismesAAfficher($strTypeDossier)
  {
    $DossierTable = $strTypeDossier."Table";
    $arrOrganismeAAfficher = array();

    $arrOrganismesActifs = $this->createQuery('o')
                                ->where('o.est_actif = 1')
                                ->execute();

    $arrOrganismeDossiers = call_user_func($DossierTable.'::getInstance')->getOrganismeParDossier();

    if($arrOrganismesActifs->count() > 0)
    {
      foreach ($arrOrganismesActifs as $objOrganisme)
      {
        if(in_array($objOrganisme->getId(),$arrOrganismeDossiers) && !in_array($objOrganisme,$arrOrganismeAAfficher))
        {
          $arrOrganismeAAfficher[] = $objOrganisme;
        }
      }
    }

    return $arrOrganismeAAfficher;
  }
  

}
