<?php

/**
 * Dossier_bpiTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Dossier_bpiTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return object Dossier_bpiTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Dossier_bpi');
  }

  /**
   *  Fourni des représentants cannoniques pour les années de création (widget Année Filtre)
   * @return DoctrineCollection liste des dossiers représentants canoniques
   *                            des années de création présentes en base
   * Auteur : Actimage, WilliamR
   */
  public function getAnneesDossiers() {
    $objRequeteDoctrine = $this->createQuery('d')->orderBy('d.created_at ASC');
    $arrDossiers = $objRequeteDoctrine->execute();

    $arrAnnees = array();
    $arrDossiersCanon = new Doctrine_Collection('Dossier_bpi');


    //recupération de l'année et ajout dans liste des années / liste canonique selon présence
    foreach ($arrDossiers as $objDossier) {
      $annee = $objDossier->getDateTimeObject('created_at')->format('Y');
      if (!in_array($annee, $arrAnnees)) {
        $arrAnnees[] = $annee;
        $arrDossiersCanon->add($objDossier);
      }
    }
    return $arrDossiersCanon;
  }

  /**
   *  Ajoute le filtre par annee à la requête de recherche
   * @param Doctrine_Query  $objRequeteDoctrine   requête envoyée par le filtre
   * @param Id               $id                  Id du dossier Canon pour l'année choisie
   * @return Doctrine_Query                       requête retournée au filtre
   * Auteur : William RICHARDS, Actimage
   */
  public function appliquerFiltreAnnee(Doctrine_Query $objRequeteDoctrine, $id) {
    $rootAlias = $objRequeteDoctrine->getRootAlias();
    $objDossier = $this->findOneById($id);
    if ($objDossier != false) {
      $annee = $objDossier->getDateTimeObject('created_at')->format('Y');
      $objRequeteDoctrine->andWhere($rootAlias . '.created_at >= ?', $annee . '-01-01 00:00:00');
      $objRequeteDoctrine->andWhere($rootAlias . '.created_at <= ?', $annee + 1 . '-01-01 00:00:00');
    }
    return $objRequeteDoctrine;
  }

  /**
   *  Ajoute le filtre par nom/prénom/email des innovateurs dans la requête de recherche des dossiers
   * @param Doctrine_Query      $objRequeteDoctrine   requête envoyée par le filtre
   * @param string              $strValeure           string a rechercher
   * @return Doctrine_Query                           requête retournée au filtre
   * Auteur : Actimage
   */
  public function appliquerFiltreNomPrenomEmail(Doctrine_Query $objRequeteDoctrine, $strValeure) {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine->innerJoin($rootAlias . '.Part_inventive p')
            ->innerJoin('p.Inventeur i')
            ->andWhere('(i.nom LIKE ?', '%' . $strValeure . '%')
            ->orWhere('i.prenom LIKE ?', '%' . $strValeure . '%')
            ->orWhere('i.email LIKE ?' . ')', '%' . $strValeure . '%');
    return $objRequeteDoctrine;
  }

  /**
   * Ajoute le filtre titre dans la requête de recherche des dossiers
   * @param Doctrine_Query      $objRequeteDoctrine   requête envoyée par le filtre
   * @param string              $strValeure           string a rechercher
   * @param string              $strOperateur         operateur
   * @return Doctrine_Query                           requête retournée au filtre
   * @author Gabor JAGER, Actimage
   */
  public function appliquerFiltreTitre(Doctrine_Query $objRequeteDoctrine, $strValeure, $strOperateur) {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $strValeure = str_replace("  ", " ", trim($strValeure));
    $arrValeurs = explode(" ", $strValeure);

    $strSql = "";
    foreach ($arrValeurs as $strVal) {
      $strSql .= ( $strSql == "" ? "" : $strOperateur) . " titre LIKE '%" . $strVal . "%' ";
    }

    $strSql = "(" . $strSql . ")";

    $objRequeteDoctrine->andWhere($strSql);

    return $objRequeteDoctrine;
  }

  /**
   *  Filtre la requête d'affichage des dossiers BPI en fonction des credentials
   * @param Doctrine_Query $objRequeteDoctrine  requête envoyée par le filtre
   * @param myUser         $objUtilisateur      utilisateur courant
   * @return Doctrine_Query                     requête finale
   * @author Actimage
   */
  public function getRequeteListeParUtilisateur(Doctrine_Query $objRequeteDoctrine, myUser $objUtilisateur) {
    $strRootAlias = $objRequeteDoctrine->getRootAlias();

    //si l'utilisateur est seulement correspondant BPI
    if ($objUtilisateur->hasCredential('COR-BPI') && !$objUtilisateur->hasCredential('SUP-BPI') && !$objUtilisateur->hasCredential('USR-BPI')) {
      $objRequeteDoctrine->andWhere($strRootAlias . '.autorite_decision_id = ?', $objUtilisateur->getUtilisateur()->getEntiteId())
              ->orWhere($strRootAlias . '.hierarchie_locale_id = ?', $objUtilisateur->getUtilisateur()->getEntiteId());
    }
    return $objRequeteDoctrine;
  }

  public function getIncrement() {
    $arrNumerosDossiersMIP = $this->createQuery('d')->select('numero')->orderBy('numero DESC')->execute();
    return $arrNumerosDossiersMIP[0]->getNumero() + 1;
  }

  /**
   * Recupere les dossier disponibles
   * @param string $strSessionToken
   * @param string $strDossierMipId
   * @return Doctrine_Query
   * @author William
   */
  public function retrieveDossierBPIDisponibles($strSessionToken,$strDossierMipId){
    $objRequeteDoctrine = $this->createQuery('d')
                               ->where('d.est_actif = 1')->andWhere('d.etat_partage_id = 3')
                               ->leftJoin('d.Session_liaison_dossiers_mip_bpi s WITH s.dossier_bpi_id = d.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.est_concerne = 0 OR s.transaction_token is null')
                               ->leftJoin('d.Dossier_mip_dossier_bpi l on l.dossier_mip_id = ? and l.dossier_bpi_id = d.id',$strDossierMipId)
                               ->andWhere('l.dossier_bpi_id != d.id OR l.dossier_mip_id is null')
                               ->orWhere('s.est_concerne = 0')
            ;
     return $objRequeteDoctrine->orderBy('d.numero');
  }


  /**
   * Recupere les dossiers concernés
   * @param string $strSessionToken
   * @param string $strDossierMipId
   * @return Doctrine_Query
   * @author William
   */
  public function retrieveDossierBPIConcernes($strSessionToken,$strDossierMipId){
    $objRequeteDoctrine = $this->createQuery('d')
                               ->where('d.est_actif = 1')
                               ->leftJoin('d.Session_liaison_dossiers_mip_bpi s WITH s.dossier_bpi_id = d.id and s.transaction_token = ?',$strSessionToken)
                               ->andWhere('s.est_concerne = 1 OR s.transaction_token is null')
                               ->leftJoin('d.Dossier_mip_dossier_bpi l on l.dossier_bpi_id = d.id')
                               ->andWhere('l.dossier_mip_id = ? OR l.dossier_mip_id is null',$strDossierMipId)
                               ->andWhere('NOT (l.dossier_mip_id is null AND s.transaction_token is null)')
                               ->orWhere('s.est_concerne = ?','1')
            ;
     return $objRequeteDoctrine->orderBy('d.numero');
  }

  /**
   *  retrieveStatistiquesQuery
   * @return Doctrine_Query Requete de base pour le filtre de l'écran statistique
   * @author Julien GAUTIER
   */
  public function retrieveStatistiquesQuery() {
    $objRequeteDoctrine = Doctrine_Query::create()
                    ->select('d.id')
                    ->from('Dossier_bpi d')
                    ->where('d.est_actif = 1')
    ;
    return $objRequeteDoctrine;
  }

  /**
   *  Ajoute le filtre par entité (hierarchie locale et direction) dans la requête filtre des statistiques
   * @param Doctrine_Query      $objRequeteDoctrine   requête envoyée par le filtre
   * @param string              $strValeure           string a rechercher
   * @return Doctrine_Query                           requête retournée au filtre
   * Auteur : Julien GAUTIER
   */
  public function appliquerFiltreEntite(Doctrine_Query $objRequeteDoctrine, $strValeure) {
    $rootAlias = $objRequeteDoctrine->getRootAlias();
    $objRequeteDoctrine->andWhere('(d.hierarchie_locale_id =' . $strValeure . ' OR d.autorite_decision_id =' . $strValeure . ')');

    return $objRequeteDoctrine;
  }

  /**
   *  Ajoute le filtre par organisme mindef dans la requête filtre des statistiques
   * @param Doctrine_Query      $objRequeteDoctrine   requête envoyée par le filtre
   * @param string              $strValeure           string a rechercher
   * @return Doctrine_Query                           requête retournée au filtre
   * Auteur : Julien GAUTIER
   */
  public function appliquerFiltreOrganismeMindef(Doctrine_Query $objRequeteDoctrine, $strValeure) {
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine->leftJoin($rootAlias . '.HierarchieLocale eh')
            ->leftJoin($rootAlias . '.AutoriteDecision ed')
            ->andWhere('(ed.organisme_mindef_id = ' . $strValeure . ' OR eh.organisme_mindef_id = ' . $strValeure . ')');
    return $objRequeteDoctrine;
  }

  /**
   * getCountX
   *
   * Comptage du nombre total de dossiers filtrés avec jointure sur une table
   *
   * @param Doctrine_Query $objRequeteDoctrine Requête donnée par le filtre statistique donnant la liste de dossiers
   *                                           sur laquelle les statistique doivent être faites
   * @author Julien GAUTIER
   * @return integer
   */
  public function getCountDossiers(Doctrine_Query $objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }

    $result = clone $objRequeteDoctrine;
    return $result->execute()->count();
  }

  public function getCountDossiersClassement(Doctrine_Query $objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $result = clone $objRequeteDoctrine;
    $result->addFrom('classement_invention_inventeur cii')
            ->andWhere('cii.dossier_bpi_id = '.$rootAlias.'.id')
            ->distinct(true);

    return $result->execute()->count();
  }

  public function getCountDossiersBrevetables(Doctrine_Query $objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    $rootAlias = $objRequeteDoctrine->getRootAlias();
    
    $result = clone $objRequeteDoctrine;
    $result->andWhere($rootAlias.'.est_brevetable = 1');
    return $result->execute()->count();
  }

  /**
   *  getCountsByX retourne une array('clef' => 'compte') donnant le nombre de dossier par clef
   *  getCountByX  retourne le compte correspondant au nombre de dossiers selon une condition
   * @param Doctrine_Query $objRequeteDoctrine Requête donnée par le filtre statistique donnant la liste de dossiers
   *                                           sur laquelle les statistique doivent être faites
   * @return array voir ci-dessus
   *
   * @author Julien GAUTIER
   */

  public function getCountsByOrganisme(Doctrine_Query $objRequeteDoctrine = null) {
    $arrResults = array();
    foreach (Organisme_mindefTable::getInstance()->findAll() as $organisme) {
      $arrResults[$organisme->getIntitule()] = $this->getCountByOrganisme($organisme->getId(), $objRequeteDoctrine);
    }
    return $arrResults;
  }

   protected function getCountByOrganisme($intId, Doctrine_Query $objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $result = clone $objRequeteDoctrine;
    $result->leftJoin($rootAlias . '.HierarchieLocale rhl')
            ->leftJoin($rootAlias . '.AutoriteDecision rad')
            ->andWhere('(rad.organisme_mindef_id = ' . $intId . ' OR rhl.organisme_mindef_id = ' . $intId . ')');

    return $result->execute()->count();
  }

  public function getCountsByClassement(Doctrine_Query $objRequeteDoctrine = null) {
    $arrResults = array();
    foreach (ClassementTable::getInstance()->findAll() as $classement) {
      $arrResults[$classement->getIntitule(). " (".$classement->getAbreviation().")"] = $this->getCountByClassement($classement->getId(), $objRequeteDoctrine);
    }
    return $arrResults;
  }

   protected function getCountByClassement($intId, Doctrine_Query $objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    $rootAlias = $objRequeteDoctrine->getRootAlias();
    $result = clone $objRequeteDoctrine;
    $result->addFrom('classement_invention_inventeur cii')
            ->andWhere('cii.dossier_bpi_id = '.$rootAlias.'.id')
            ->andWhere('cii.classement_final_id = ' . $intId);

    return $result->execute()->count();
  }

   public function getCountsByAnnees(Doctrine_Query $objRequeteDoctrine = null) {
    $arrResults = array();
    foreach ($this->getAnneesBascules($objRequeteDoctrine) as $annee) {
      $arrResults[$annee] = $this->getCountByAnnee($annee, $objRequeteDoctrine);
    }
    return $arrResults;
  }

  protected function getCountByAnnee($strAnnee, Doctrine_Query $objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $dateMin = $strAnnee . '-01-01 00:00:00';
    $dateMax = ($strAnnee + 1) . '-01-01 00:00:00';

    $result = clone $objRequeteDoctrine;
    $result->andWhere('(d.created_at >= ? AND d.created_at <= ?)', array($dateMin, $dateMax));

    return $result->execute()->count();
  }

  /**
   *  Fourni la liste des années ou des dossiers ont été créés
   * @return array  liste des années de création présentes en base
   * @author : Julien GAUTIER
   */
  public function getAnneesBascules($objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null){
      $objRequeteDoctrine = $this->createQuery();
    }
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $result = clone $objRequeteDoctrine;
    $result = $result->orderBy($rootAlias.'.created_at ASC');
    $arrDossiers = $result->execute();
    $arrAnnees = array();

    //recupération de l'année et ajout dans liste des années / liste canonique selon présence
    foreach ($arrDossiers as $objDossier) {
      if (strlen($objDossier->getDateTimeObject('created_at')->format('Y')) == 4)
        $annee = $objDossier->getDateTimeObject('created_at')->format('Y');
        if (!in_array($annee, $arrAnnees)) {
          $arrAnnees[] = $annee;
        }
    }
    return $arrAnnees;
  }

  public function getCountsByEntite(Doctrine_Query $objRequeteDoctrine = null) {
    $arrResults = array();
    foreach (Organisme_mindefTable::getInstance()->findAll() as $organisme) {
      $arrResults[$organisme->getIntitule()] = $this->getCountByOrganisme($organisme->getId(), $objRequeteDoctrine);
      $entites = EntiteTable::getInstance()->retrieveEntitesByOrganismeMindefId($organisme->getId())->execute();
      $arrResEntitesTmp = array();
      foreach ($entites as $entite) {
        $parentsEntite = $entite->getParentsArbo();
        $nbTirets = substr_count($parentsEntite, ",");
        $cle = $parentsEntite . ($parentsEntite == "" ? "" : ",") . $entite->getId();
        $sousEntites = $entite->getIdsSousEntites(false);
        if ($parentsEntite != "") $nbTirets++;
        $strTirets = "--";
        for($cptr_tirets = 0; $cptr_tirets < $nbTirets; $cptr_tirets++)
          $strTirets .= "--";
        $arrResEntitesTmp[$cle] = array($strTirets . " " . $entite->getIntitule(), $this->getCountByEntite(implode(",", $sousEntites), $objRequeteDoctrine));
        ksort($arrResEntitesTmp, SORT_STRING);
      }
      foreach ($arrResEntitesTmp as $entite) {
        $arrResults[$entite[0]] = $entite[1];
      }
    }
    return $arrResults;
  }

   protected function getCountByEntite($strIdList, Doctrine_Query $objRequeteDoctrine = null) {
    if ($objRequeteDoctrine == null) {
      $objRequeteDoctrine = $this->createQuery();
    }
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $result = clone $objRequeteDoctrine;
    $result->andWhere("( d.autorite_decision_id IN (".$strIdList.") OR d.hierarchie_locale_id IN (".$strIdList.") )");

    return $result->execute()->count();
  }

  /**
   * Permet de récupérer tous les dossiers actifs
   * @return Doctrine_Collection
   * @author Gabor JAGER
   */
  public function getDossiersActifs()
  {
    $objRequete = $this->createQuery()
                       ->where("est_actif = 1");

    return $objRequete->execute();
  }

  /**
   * Vericfie si le dossier a des contentieux
   *
   * @param string $strIdDossierBpi Id du dossier Bpi vis-à-vis la base de données
   * @return bootean
   *
   * @author Simeon PETEV
   */
  public function hasDossierContentieux($strIdDossierBpi)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->createQuery()
                      ->from('Contentieux c')
                      ->innerJoin('c.Part_inventive pi on c.part_inventive_id = pi.id')
                      ->innerJoin('pi.Dossier_bpi d on pi.dossier_bpi_id = d.id')
                      ->where('d.id = ?', $strIdDossierBpi)
    ;

    $boolRes = ($objQuery->count() != 0);

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $boolRes;
  }
}
