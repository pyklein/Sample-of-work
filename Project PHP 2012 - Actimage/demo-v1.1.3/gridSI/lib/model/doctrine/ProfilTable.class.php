<?php

/**
 * ProfilTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProfilTable extends Doctrine_Table {

  const ADM       = "1";
  const SUP_BPI   = "2";
  const USR_BPI   = "3";
  const COR_BPI   = "4";
  const CLI_BPI   = "5";
  const SUP_MIP   = "6";
  const USR_MIP   = "7";
  const COR_MIP   = "8";
  const CLI_MIP   = "9";
  const SUP_MRIS  = "10";
  const USR_MRIS  = "11";
  const COR_MRIS  = "12";
  const CLI_MRIS  = "13";
  
  public static function getProfilsBpi()
  {
    return array(ProfilTable::SUP_BPI,ProfilTable::USR_BPI,ProfilTable::COR_BPI,ProfilTable::CLI_BPI);
  }

  public static function getProfilsMip()
  {
    return array(ProfilTable::SUP_MIP,ProfilTable::USR_MIP,ProfilTable::COR_MIP,ProfilTable::CLI_MIP);
  }

  public static function getProfilsMris()
  {
    return array(ProfilTable::SUP_MRIS,ProfilTable::USR_MRIS,ProfilTable::COR_MRIS,ProfilTable::CLI_MRIS);
  }

  /**
   * Returns an instance of this class.
   *
   * @return object ProfilTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Profil');
  }

  /**
   * Retourne les Profils d'un utilisateur
   * @param integer $intUtilisateurId
   * @return Profil[]
   */
  public function getProfilsParUtilisateur($intUtilisateurId) {
    $requete = Doctrine_Query::create()
                    ->from('Profil p')
                    ->innerjoin('p.Utilisateur_profil up ON p.id = up.profil_id')
                    ->where('up.utilisateur_id = ?', $intUtilisateurId);

    return $requete->execute();
  }

  /**
   *
   * @return id Identifiant du profil Client MIP
   */
  public function getInnovateurProfilId() {
    foreach ($this->findAll() as $objProfil) {
      if ($objProfil->__toString() == "Client MIP") {
        return $objProfil->getId();
      }
    }
  }


  /**
   * Recupere un query permetant de renvoyer tous les profils en ordre ascendant
   * de leur intitule et leur code
   *
   * @return object Doctrine_Query
   *
   * @author Simeon PETEV
   */
  public function getQueryTousOrdreASC()
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject()
                        ->orderBy('intitule ASC')
                        ->addOrderBy('code ASC');

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery;
  }


  /**
   * Renvoie une requette qui recupere les profils gerables par l'utilisateurs
   * avec l'Id donnes. Si id=0, il se comporte com un admin
   *
   * @param integer $intIdUsr Id utilisateur ou 0 pour avoir artificielement des
   *                                droits d'amin
   * @return object Doctrine_Query
   *
   * @author Simeon PETEV
   */
  public function getQueryProfilsGerablesParCetUtilisateur($intIdUsr)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objUtilisateur = UtilisateurTable::getInstance()->getUnAvecId($intIdUsr);

    if ($objUtilisateur->getId())
    {
      $arrProfilsUtilisateur = $objUtilisateur->getProfils();
    }
    
    $objQuery = $this->getQueryObject();
    
    if (($intIdUsr!=0) && !$objUtilisateur->hasProfil(ProfilTable::ADM))
    {
      $arrIdMetiers = array();

      foreach ($arrProfilsUtilisateur as $objProfil)
      {
        if (strcmp($objProfil->getCode(), 'SUP') == 0)
        {
          $arrIdMetiers[] = $objProfil->getMetierId();
        }
      }

      $objQuery = $objQuery->whereIn("metier_id", $arrIdMetiers);
    }

    $objQuery = $objQuery->addOrderBy("intitule ASC")
                         ->addOrderBy("code ASC");

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery;
  }

  /**
   *
   * @return id Identifiant du profil Utilisateur MIP
   */
  public function getUtilisateurMipProfilId() {
    foreach ($this->findAll() as $objProfil) {
      if ($objProfil->__toString() == "Utilisateur MIP") {
        return $objProfil->getId();
      }
    }
  }

  public function getSuperUtilisateurMipProfilId() {
    foreach ($this->findAll() as $objProfil) {
      if ($objProfil->__toString() == "Super-utilisateur MIP") {
        return $objProfil->getId();
      }
    }
  }

  /**
   * Permet de recuperer un profil par code et intitule de meteier
   *
   * @param String $strCode code du profil (dans base de données)
   * @param String $strIntituleMetier Intitulé du metier (dans base de données)
   * @return Object Profil valide s'il est trouvé, Profil avec des champ null sinon
   *
   * @author Simeon PETEV
   */
  public function getUnAvecCodeMetier($strCode, $strIntituleMetier)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = Doctrine_Query::create()
                      ->select('p.*')
                      ->from('Profil p')
                      ->addFrom('Metier m')
                      ->where('p.code = ?',$strCode)
                      ->addWhere('m.id = p.metier_id')
                      ->addWhere('m.intitule = ?',$strIntituleMetier);

    $arrResultats = $objQuery->execute();

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return (count($arrResultats)>0) ? $arrResultats[0] : (new Profil());
  }

  /**
   * Recupere les profils du metier
   *
   * @param string $strIntituleMetier Intitule du metier
   * @return Doctrine_Collection
   *
   * @author Simeon PETEV
   */
  public function getProfilsDuMetierIntitule($strIntituleMetier)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = Doctrine_Query::create()
                      ->select('p.*')
                      ->from('Profil p')
                      ->addFrom('Metier m')
                      ->addWhere('m.id = p.metier_id')
                      ->addWhere('m.intitule = ?',$strIntituleMetier);

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery->execute();
  }

  /**
   * Recupere les ids de profils du metier
   *
   * @param string $strIntituleMetier Intitule du metier
   * @return array Array de integers
   *
   * @author Simeon PETEV
   */
  public function getIdsProfilsDuMetierIntitule($strIntituleMetier)
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrIdsProfils = array();
    $arrProfils = $this->getProfilsDuMetierIntitule($strIntituleMetier);

    foreach ($arrProfils as $objProfil)
    {
      if ($objProfil->getId())
      {
        $arrIdsProfils[] = $objProfil->getId();
      }
    }

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrIdsProfils;
  }
}
