<?php

/**
 * Inventeur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    gridSI
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Inventeur extends BaseInventeur
{
  /**
   * Permet de décider si l'objet peut être désactivé ou pas
   * @return boolean
   * @author Gabor JAGER
   */
  public function estDesactivable()
  {
    return $this['Part_inventive']->count() == 0;
  }


  /**
   * Permet d'afficher l'objet en format string
   * @return string
   * @author Gabor JAGER
   */
  public function  __toString()
  {
    return $this->getPrenom()." ".$this->getNom();
  }

  /**
   *  Cherche la part inventive d'un inventeur pour un dossier d'invention donnée et pour une session donnée (double liste)
   * @param Integer   $intDossierId     identifiant du dossier d'invention
   * @param String    $strSessionToken  transaction token correspondant à la manipulation de double liste en cours
   * @return Integer  valeure de la part inventive (%age)
   */
  public function getPartInventiveSession($intDossierId, $strSessionToken){
    $objSessionInventeur = Session_situation_inventeursTable::getInstance()->getSessionByInventeurIdAndToken($this->getId(),$strSessionToken);
    $objPartInventive = null;
    
    $arrPartsInventives = $this['Part_inventive'];
    foreach ($arrPartsInventives as $objPart){
      if ($objPart->getDossier_bpiId() == $intDossierId){
        $objPartInventive = $objPart;
      }
    }
    if (isset($objSessionInventeur[0])){
      return $objSessionInventeur[0]->getPartInventive();
    }
    if ($objPartInventive){
      return $objPartInventive->getPartInventive();
    }
    return 0;
  }

  public function getSituation(){
    return $this->getEstExterieur() ? $this->getOrganisme()->getIntitule(): libelle("msg_libelle_mindef");
  }

  public function getClassementInventeurPourDossierBPI($strIdDossierBPI)
  {
    $mixedClassement = Classement_invention_inventeurTable::getInstance()->findOneByConcerneIdAndDossierId($this->getId(),$strIdDossierBPI);
    $strResultat = '';

    if ($mixedClassement)
    {
      $strResultat = $mixedClassement[0]->getClassement_final()->getIntitule().' ('.$mixedClassement[0]->getClassement_final()->getAbreviation().')';
    }

    return $strResultat;
  }
}
