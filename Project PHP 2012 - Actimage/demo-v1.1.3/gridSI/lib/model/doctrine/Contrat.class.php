<?php

/**
 * Contrat
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    gridSI
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Contrat extends BaseContrat
{
  public function  __toString()
  {
    if ($this->getNumeroMb() != "")
    {
      return $this->getNumeroMb();
    }
    else
    {
      return $this->getId();
    }
  }

  /**
   * Affiche le contrat sous cette forme : Abréviation_type_contrat - signataires (intitule_du_statut)
   *
   * @return String
   *
   * @author Alexandre WETTA
   */
  public function afficheContratEtStatut() {
    $strContrat = "";

    //recherche des abréviations des types de contrat
    $arrContratTypeContrat = Contrat_type_contratTable::getInstance()->findByContratId($this->getId());
    foreach ($arrContratTypeContrat as $objContratTypeContrat) {
      $strContrat .= $objContratTypeContrat->getType_contrat()->getAbreviation() . ", ";
    }

    //on enlève la dernière virgule
    $strContrat = substr($strContrat, 0, -2);
    $strContrat .= " - ";

    //recherche des signataires
    $arrSignataires = SignataireTable::getInstance()->findByContratId($this->getId());
    $arrOrgId = array();
    foreach ($arrSignataires as $objSignataire) {

      if (!array_key_exists($objSignataire->getOrganismeId(), $arrOrgId)) {
        $strContrat .= $objSignataire->getOrganisme()->getIntitule() . ", ";
      }

      $arrOrgId[$objSignataire->getOrganismeId()] = $objSignataire->getOrganismeId();
    }
    //on enlève la dernière virgule
    $strContrat = substr($strContrat, 0, -2);


    $strContrat .= " (" . $this->getStatut_contrat()->getIntitule() . ")";
    return $strContrat;
  }

  /**
   * Permet de verifier si le contrat peut avoir des document à générer
   *
   * @return boolean
   *
   * @author Simeon PETEV
   */
  public function peutAvoirDocumentsAGenerer()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrTypesContrat = $this->getType_contrats();
    $boolEstTypeLicence = false;
    $boolEstTypeCoprop = false;
    $boolHasBrevet = (count($this->getBrevet()) > 0);

    foreach ($arrTypesContrat as $objType)
    {
      if ($objType->getId() == Type_contratTable::Licence)
      {
        $boolEstTypeLicence = true;
      }

      if ($objType->getId() == Type_contratTable::Reglement)
      {
        $boolEstTypeCoprop = true;
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return (($boolEstTypeLicence || $boolEstTypeCoprop) && $boolHasBrevet);
  }

}
