<?php

/**
 * Dossier_mip_dossier_bpiTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Dossier_mip_dossier_bpiTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return Dossier_mip_dossier_bpiTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Dossier_mip_dossier_bpi');
  }

  public function getByDossierBPIAndMIPIds($intDossierBPIId, $intDossierMIPId){
        return $this->createQuery('d')->where('d.dossier_mip_id = ?', $intDossierMIPId)->andWhere('d.dossier_bpi_id = ?', $intDossierBPIId)->execute();
  }

  /**
   * Retourne les enregistrements correspondant aux liaisons dossier MIP d'un dossier BPI
   * @param int $intDossierBpiId   Identifiant du dossier BPI
   *
   */
  public function retrieveDossiersMIPByDossiersBPI($intDossierBpiId)
  {
    $objRequete = $this->createQuery('d')->where('d.dossier_bpi_id = ?',$intDossierBpiId);
    return $objRequete;
  }

  /**
   * Retourne les enregistrements correspondant aux liaisons dossier BPI d'un dossier MIP
   * @param int $intDossierMipId   Identifiant du dossier MIP
   *
   */
  public function retrieveDossiersBPIByDossiersMIP($intDossierMipId)
  {
    $objRequete = $this->createQuery('d')->where('d.dossier_mip_id = ?',$intDossierMipId);
    return $objRequete;
  }



  public function enregistrerModificationSession($strTransactionToken, $intDossierId, Utilisateur $objUtilisateur) {
    $objEtatSessionMIP = Session_liaison_dossiers_mip_bpiTable::getInstance()->retrieveEtatSession($strTransactionToken);
    $objEtatSessionBPI = Session_liaison_dossiers_bpi_mipTable::getInstance()->retrieveEtatSession($strTransactionToken);

    $connection = $this->getConnection();
    $connection->beginTransaction();
    //L'enregistrement de ces informations se fait en une seule transaction
    try {
      foreach ($objEtatSessionMIP as $objEnregistrement) {
        $intDossierBPIId = $objEnregistrement->getDossierBpiId();
        $objDossierBpiLie = $this->getByDossierBPIAndMIPIds($intDossierBPIId, $intDossierId);

        //cas : Dossier BPI non concerné au début des opérations d'affectations
        if ($objDossierBpiLie->count() == 0) {
          //cas : Dossier concerné après les opérations (on ne fait rien si non concerné)
          if ($objEnregistrement->getEstConcerne() == 1) {
            $objNouveauDossierBpiLie = new Dossier_mip_dossier_bpi();
            $objNouveauDossierBpiLie->setDossierBpiId($intDossierBPIId);
            $objNouveauDossierBpiLie->setDossierMipId($intDossierId);

            $objNouveauDossierBpiLie->save();
          }
          //cas : Dossier concerné au début des opérations
        } else {
          //cas : Dossier non concerné après les opérations -> suppression de l'enregistrement Dossier_mip_dossier_bpi
          if (!$objEnregistrement->getEstConcerne()) {
            $objDossierBpiLie[0]->delete();
          }
        }
        //nettoyage de la table support
        $objEnregistrement->delete();
      }
      foreach ($objEtatSessionBPI as $objEnregistrement) {
        $intDossierMIPId = $objEnregistrement->getDossierMipId();
        $objDossierMipLie = $this->getByDossierBPIAndMIPIds($intDossierId,$intDossierMIPId);
        
        //cas : Dossier MIP non concerné au début des opérations d'affectations
        if ($objDossierMipLie->count() == 0) {
          //cas : Dossier concerné après les opérations (on ne fait rien si non concerné)
          if ($objEnregistrement->getEstConcerne() == 1) {
            $objNouveauDossierMipLie = new Dossier_mip_dossier_bpi();
            $objNouveauDossierMipLie->setDossierBpiId($intDossierId);
            $objNouveauDossierMipLie->setDossierMipId($intDossierMIPId);

            $objNouveauDossierMipLie->save();
          }
          //cas : Dossier concerné au début des opérations
        } else {
          //cas : Dossier non concerné après les opérations -> suppression de l'enregistrement Dossier_mip_dossier_bpi
          if (!$objEnregistrement->getEstConcerne()) {
            $objDossierMipLie[0]->delete();
          }
        }
        //nettoyage de la table support
        $objEnregistrement->delete();
      }
      $connection->commit();
    } catch (Exception $ex) {
      $connection->rollBack();
      throw $ex;
    }
  }

}