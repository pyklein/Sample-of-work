<?php

/**
 * Dossier_mip
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    gridSI
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Dossier_mip extends BaseDossier_mip {

  const A_ERREUR_CONTROLE = 2;
  const A_AVERTI_CONTROLE = 1;
  const SANS_ERREUR = 0;

  public function __toString() {
    return $this->getNumero() . ' - ' . $this->getTitre();
  }

  /**
   *
   * @return Année de création sous forme de string
   */
  public function getAnnee() {
    return $this->getDateTimeObject('created_at')->format('Y');
  }

  public function save(Doctrine_Connection $conn = null, $mixPasseEnDossier = false) {

    if (($this->isNew() && !$this->estPreProjet()) || $mixPasseEnDossier) {
//Génération du numéro
      $this->setNouveauNumero();

//création du repertoire partagé
      $this->creerRepertoire();

//affectation du statut et de date_bascule
      if ($mixPasseEnDossier != 2 && sfContext::hasInstance()) {
        $this->setDateBascule(date('Y-m-d H:i:s'));
      }
      if ($mixPasseEnDossier) {
        $this->setStatutProjetMipId($mixPasseEnDossier);
      }
//Génération du thumbnail
      $this->genererThumbnail();
    }

//Génération du thumbnail
    if (array_key_exists('photographie', $this->getModified())) {
      $this->genererThumbnail();
    }

    //Mise à jour du champ repertoire_partagé
    $this->setRepertoirePartage(str_replace('/', '_',$this->getNumero()));
    
    //Mise à jour des controles sur le dossiers
    $statutErreur = $this->aErreursControle(true);
    $this->setNecessite_controle($statutErreur);

    parent::save($conn);

  }

  public function genererThumbnail() {
    $this->logDebug('genererThumbnail début');
    if ($this->getPhotographie() != null
            && strlen($this->getPhotographie()) > 0) {
      $arrThumbs = sfConfig::get("app_photos_thumbnails");

      $this->logDebug('genererThumbnail génération thumbnail');

      $utilPhoto = new UtilPhoto();
      $utilArbo = new ServiceArborescence();
      $utilPhoto->creerThumbnail($utilArbo->getRepertoireDossiersMIP() . $this->getPhotographie(),
              $arrThumbs["largeur"],
              $arrThumbs["hauteur"],
              $arrThumbs["postfix"]);
    }
    $this->logDebug('genererThumbnail fin');
  }

  public function setNouveauNumero() {
    $increment = Dossier_mipTable::getInstance()->getIncrement();
    $abreviation = $this['Organisme_mindef']->getAbreviation();
    $this->setNumero(date('Y') . '/' . $increment . '/' . strtoupper($abreviation[0]));
  }

  public function creerRepertoire() {
    try {
      $utilArbo = new ServiceArborescence();
      $this->logDebug('creerRepertoire Debut');
      $strRepertoire = $utilArbo->getRepertoirePartageDocumentsMip($this->getNumero());

      $utilFichier = new UtilFichier();

      try {
        $utilFichier->creerRepertoire($strRepertoire);
      } catch (Exception $ex) {}

      $strRepertoire = $utilArbo->getRepertoireDocumentsDossierMip($this->getNumero());

      try {
        $utilFichier->creerRepertoire($strRepertoire);
      } catch (Exception $ex) {}

      $this->logDebug('creerRepertoire Succes');
      return true;
    } catch (Exception $ex) {
      $this->logDebug('creerRepertoire Echec. Erreur: ' . $ex->getMessage());
      return false;
    }
  }

  /**
   *  Bascule un pré-projet mip en dossier d'innovation
   * @param Doctrine_Connection $conn
   */
  public function basculer(Doctrine_Connection $conn = null) {
    $this->logDebug('basculer Debut');
    try {
      $this->save($conn, Statut_projet_mipTable::DOSSIER_INNOV);
      $this->logDebug('basculer Fin');
    } catch (Exception $ex) {
      $this->logErreur('basculer Erreur, message: ' . $ex->getMessage());
    }
  }

  /**
   *  Abandonne un pré-projet mip
   * @param Doctrine_Connection $conn
   */
  public function abandonner(Doctrine_Connection $conn = null) {
    $this->logDebug('abandonner Debut');
    try {
      $this->save($conn, Statut_projet_mipTable::PRE_PROJET_ABANDON);
      $this->logDebug('abandonner Fin');
    } catch (Exception $ex) {
      $this->logErreur('abandonner Erreur, message: ' . $ex->getMessage());
    }
  }

  public function delete(Doctrine_Connection $conn = null) {
    foreach ($this['Documents_mip'] as $objDocument) {
      $objDocument->delete();
    }
    if ($this->getPhotographie()) {
      $utilFichier = new UtilFichier();
      $utilArbo = new ServiceArborescence();
      $utilFichier->supprimerFichier( $utilArbo->getRepertoireDossiersMIP() . $this->getPhotographie());
    }
    parent::delete($conn);
  }

  /**
   *
   * @return Doctrine_Collection    Innovateurs participant au dossier
   */
  public function getInnovateurs() {
    return UtilisateurTable::getInstance()->retrieveInnovateursByDossierMIP($this->getId());
  }

  /**
   *  Determine si le dossier est en statut de préprojet
   * @return boolean true si le dossier est un préprojet
   */
  public function estPreProjet() {
    return $this->getStatutProjetMipId() != Statut_projet_mipTable::DOSSIER_INNOV;
  }

  public function aRelanceEnvoyeeDeType($intTypeRelance) {
    return Relance_dossier_mipTable::getInstance()->estRelanceEnvoye($this->getId(), $intTypeRelance);
  }

  public function getRelanceDeType($intTypeRelance) {
    return Relance_dossier_mipTable::getInstance()->findOneByDossierType($this->getId(), $intTypeRelance);
  }

  /**
   *
   * @return int Dossier_mip::SANS_ERREUR: pas d'erreur,
   *             Dossier_mip::A_AVERTI_CONTROLE: warnings,
   *             Dossier_mip::A_ERREUR_CONTROLE: erreurs
   */
  public function aErreursControle() {
    $this->logDebug('aErreursControle début');
    $factory = new ValidateurRegleMetierFactory();
    $this->logDebug('aErreursControle appel UtilValidateurRegleDossierMIP');
    $arrErreurs = $factory->getValidateurMetier($this)->getStatutValidation(true);
    if (isset($arrErreurs['infos']) || isset($arrErreurs['regles'])) {
      $this->logDebug('aErreursControle fin, erreurs trouvées');
      return Dossier_mip::A_ERREUR_CONTROLE;
    }
    if (isset($arrErreurs['echeances'])) {
      $erreursEcheances = array('erreur' => false, 'avertissement' => false);
      foreach ($arrErreurs['echeances'] as $erreur) {
        if ($erreur['class'] == 'controle_haut') {
          $erreursEcheances['erreur'] = true;
          break;
        }
        if ($erreur['class'] == 'controle_bas') {
          $erreursEcheances['avertissement'] = true;
        }
      }
      if ($erreursEcheances['erreur']) {
        $this->logDebug('aErreursControle fin, erreurs trouvées');
        return Dossier_mip::A_ERREUR_CONTROLE;
      }
      $this->logDebug('aErreursControle fin, avertissements trouvées');
      return Dossier_mip::A_AVERTI_CONTROLE;
    }
    $this->logDebug("aErreursControle fin, pas d'erreurs");
    return Dossier_mip::SANS_ERREUR;
  }

  /**
   * Permet de récuperer le numero d'increment de dossier à partir de numero dossier
   *   ex. 2011/xxx/E -> renvoie xxx
   * @return string
   * @author Gabor JAGER
   */
  public function getNumeroIncrement()
  {
    $strNumero = $this->getNumero();
    $arrNumero = explode("/", $strNumero);
    return isset($arrNumero[1]) ? $arrNumero[1] : "";
  }

  /**
   * Recupere le budget total
   *
   * @return float
   *
   * @author Simeon PETEV
   */
  public function getBudgetTotalGlobal()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $floatBudgetTotalGl = 0;

    foreach ($this->getBudget() as $objBudget)
    {
      if ($objBudget->getBudget_type()->getEstNegatif())
      {
        $floatBudgetTotalGl -= $objBudget->getMontant();
      } else
      {
        $floatBudgetTotalGl += $objBudget->getMontant();
      }
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $floatBudgetTotalGl;
  }

  public function getFinancementsGlobauxParAnneesSansCumule()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrFinancementsParAnnees = array();

    foreach ($this->getFinancement() as $objFinancement)
    {
      $strAnneeFin = $objFinancement->getDateTimeObject('date_financement')->format('Y');

      if (isset($arrFinancementsParAnnees[$strAnneeFin]))
      {
        if ($objFinancement->getBudget_type()->getEstNegatif())
        {
          $arrFinancementsParAnnees[$strAnneeFin] -= $objFinancement->getMontant();
        } else
        {
          $arrFinancementsParAnnees[$strAnneeFin] += $objFinancement->getMontant();
        }
      } else
      {
        if ($objFinancement->getBudget_type()->getEstNegatif())
        {
          $arrFinancementsParAnnees[$strAnneeFin] = -$objFinancement->getMontant();
        } else
        {
          $arrFinancementsParAnnees[$strAnneeFin] = $objFinancement->getMontant();
        }
      }
    }

    //Trie asc par annee
    ksort($arrFinancementsParAnnees);

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrFinancementsParAnnees;
  }

  /**
   * Recupere les financements globaux par anneé
   *
   * @return array (key,value) - (annee,total)
   *
   * @author Simeon PETEV
   */
  public function getFinancementsGlobauxParAnnees()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrFinancementsParAnnees = $this->getFinancementsGlobauxParAnneesSansCumule();

    $dernierMontant = 0;
    foreach ($arrFinancementsParAnnees as $annee => $montant)
    {
      $arrFinancementsParAnnees[$annee] += $dernierMontant;

      $dernierMontant = $arrFinancementsParAnnees[$annee];
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrFinancementsParAnnees;
  }

  /**
   * Recupere les engagements globaux par anneé
   *
   * @return array (key,value) - (annee,total)
   *
   * @author Simeon PETEV
   */
  public function getEngagementsGlobauxParAnnees()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrEngagementsParAnnees = array();

    foreach ($this->getEngagement() as $objEngagement)
    {
      $strAnneeFin = $objEngagement->getDateTimeObject('date_engagement')->format('Y');

      if (isset($arrEngagementsParAnnees[$strAnneeFin]))
      {
        if ($objEngagement->getType_engagement()->getEstNegatif())
        {
          $arrEngagementsParAnnees[$strAnneeFin] -= $objEngagement->getMontant();
        } else
        {
          $arrEngagementsParAnnees[$strAnneeFin] += $objEngagement->getMontant();
        }
      } else
      {
        if ($objEngagement->getType_engagement()->getEstNegatif())
        {
          $arrEngagementsParAnnees[$strAnneeFin] = -$objEngagement->getMontant();
        } else
        {
          $arrEngagementsParAnnees[$strAnneeFin] = $objEngagement->getMontant();
        }
      }
    }

    //Trie asc par annee
    ksort($arrEngagementsParAnnees);

    $dernierMontant = 0;
    foreach ($arrEngagementsParAnnees as $annee => $montant)
    {
      $arrEngagementsParAnnees[$annee] += $dernierMontant;

      $dernierMontant = $arrEngagementsParAnnees[$annee];
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrEngagementsParAnnees;
  }

  /**
   * Recupere les paiements globaux par anneé
   *
   * @return array (key,value) - (annee,total)
   *
   * @author Simeon PETEV
   */
  public function getPaiementsGlobauxParAnnees()
  {
    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrPaiementsParAnnees = array();

    foreach ($this->getPaiement() as $objPaiement)
    {
      $strAnneeFin = $objPaiement->getDateTimeObject('date_paiement')->format('Y');

      if (isset($arrPaiementsParAnnees[$strAnneeFin]))
      {
        $arrPaiementsParAnnees[$strAnneeFin] += $objPaiement->getMontant();
      } else
      {
        $arrPaiementsParAnnees[$strAnneeFin] = $objPaiement->getMontant();
      }
    }

    //Trie asc par annee
    ksort($arrPaiementsParAnnees);

    $dernierMontant = 0;
    foreach ($arrPaiementsParAnnees as $annee => $montant)
    {
      $arrPaiementsParAnnees[$annee] += $dernierMontant;

      $dernierMontant = $arrPaiementsParAnnees[$annee];
    }

    $this->logDebug(" [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $arrPaiementsParAnnees;
  }

}