<?php

/**
 * UtilisateurTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UtilisateurTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return UtilisateurTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Utilisateur');
  }

  /**
   * Recupere la query qui peut etre utiliser a recupere des objet utilisateurs
   * en se basant sur un filtre
   *
   * @param object $objFiltreUtilisateurs Un filtre pour utilisateurs
   * @return object DoctrineQuery pour recuperation des utilisateur en se basant sur
   *                              un filtre. Retourn un null dans certain cas
   *                              pour eviter l'execution d'une requette qui va
   *                              retourner un liste vide.
   *
   * @author Simeon PETEV
   */
  public function getQueryUtilisateursAvecFiltre($objFiltreUtilisateurs) {
    if (sfContext::hasInstance())
        sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $arrValeursFiltre = $objFiltreUtilisateurs->getValues();
    $arrTaintedValues = $objFiltreUtilisateurs->getTaintedValues();

    $objQuery = UtilisateurTable::getInstance()->getQueryObject();

    if (!$objFiltreUtilisateurs->isValid() && (count($arrTaintedValues) > 0)) {
      if (sfContext::hasInstance())
        sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

      return $objQuery->where("id = ?", "0");
    }

    if (!empty($arrValeursFiltre['nom']["text"])) {
      $objQuery = $objQuery->where("(" . 'nom' . " LIKE ? OR " . 'prenom' . " LIKE ? OR " . 'email' . " LIKE ?)",
                      array("%" . $arrValeursFiltre['nom']["text"] . "%", "%" . $arrValeursFiltre['nom']["text"] . "%", "%" . $arrValeursFiltre['nom']["text"] . "%")
      );
    }

    if ((isset($arrValeursFiltre['organisme_mindef_id'])) &&
            ($arrValeursFiltre['organisme_mindef_id'] != 0)) {
      $objQuery = $objQuery->andWhere('organisme_mindef_id' . " = ?", $arrValeursFiltre['organisme_mindef_id']);
    }

    if ((isset($arrValeursFiltre['entite_id'])) &&
            ($arrValeursFiltre['entite_id'] != 0 )) {
      $objQuery = $objQuery->andWhere('entite_id' . " = ?", $arrValeursFiltre['entite_id']);
    }

    if ((isset($arrValeursFiltre['profil_id'])) &&
            ($arrValeursFiltre['profil_id'] != 0 )) {
      $arrUtilisateursIds = Utilisateur_profilTable::getInstance()->getUtilisateursIdsByProfilId($arrValeursFiltre['profil_id']);

      if (!empty($arrUtilisateursIds)) {
        $objQuery = $objQuery->andWhereIn('id', $arrUtilisateursIds);
      } else {
        if (sfContext::hasInstance())
          sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

        return null;
      }
    }

    $objQuery->orderBy("nom, prenom");

    if (sfContext::hasInstance())
        sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery;
  }

  /**
   * Construit un query permettant de recupere les utilisateurs actifs
   * en ordre alphabetique de leur prenom et apres de leur nom
   *
   * @return Doctrine_Query
   *
   * @author Simeon PETEV
   */
  public function buildQueryUtilisateursActifsOrdreAscPrenomNom() 
  {
    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = $this->getQueryObject()
                    ->where('est_actif = 1')
                    ->orderBy('prenom ASC')
                    ->addOrderBy('nom ASC');

    if (sfContext::hasInstance())
      sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return $objQuery;
  }

  /**
   * Recupere des resultats en se basant sur un filtre personnalise
   *
   * @param UtilisateurFormFilter $objFiltreUtilisateurs Objet de type UtilisateurFormFilter
   * @return array Un array d'objets Utilisateurs
   *
   * @author Simeon PETEV
   */
  public function getUtilisateursAvecFiltre($objFiltreUtilisateurs) {
    if (sfContext::hasInstance())
        sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ DEBUT; ");

    $objQuery = UtilisateurTable::getInstance()->getQueryUtilisateursAvecFiltre($objFiltreUtilisateurs);

    if (sfContext::hasInstance())
        sfContext::getInstance()->getLogger()->debug("{".__CLASS__."} [".__FUNCTION__."] /Ligne: ".__LINE__."/ FIN; ");

    return ($objQuery != null) ? $objQuery->execute() : array();
  }

  /**
   * Recupere un array d'Utilisateur en utilisant la query fournie.
   *
   * @param object $objQueryUtilisateurs Doctrine query adapté pour recupere des
   *                                       un array d'Utilisateurs
   * @return array Un array d'Utilisateurs
   *
   * @author Simeon PETEV
   */
  public function getUtilisateursAvecQuery($objQueryUtilisateurs) {
    return $objQueryUtilisateurs->execute();
  }

  /**
   * Obtien le nombre de resultat retourne par un query Utilisateurs
   *
   * @param object $objQueryUtilisateurs Un Doctrine quary pour les Utilisateurs
   * @return integer Nombre de resultat obtenue pour le query
   *
   * @author Simeon PETEV
   */
  public function getNombreResultatUtilisateurs($objQueryUtilisateurs) {
    return $objQueryUtilisateurs->count();
  }

  /**
   * Permet de récuperer un utilisateur
   * @param string $strMail
   * @param string $strMotDePasse
   * @return Utilisateur
   * @author Gabor JAGER
   */
  public function getUtilisateurParMailEtMotDePasse($strMail, $strMotDePasse) {
    $objQuery = $this->createQuery()
                    ->where('email = ? AND mot_de_passe = ? AND est_actif = true', array($strMail, sha1($strMotDePasse)));

    $arrUtilisateurs = $objQuery->execute();

    return ($arrUtilisateurs->count() == 0) ? null : $arrUtilisateurs->get(0);
  }

  /**
   * Permet de récuperer un utilisateur selon son mail
   * @param string $strMail
   * @return Utilisateur
   * @author Jihad
   */
  public function getUtilisateurParMail($strMail) {
    $objQuery = $this->createQuery()
                    ->where('email = ? AND est_actif = true', array($strMail));

    $arrUtilisateurs = $objQuery->execute();

    return ($arrUtilisateurs->count() == 0) ? null : $arrUtilisateurs->get(0);
  }

  /**
   * Recupere un utilisateur avec un Id donnés
   *
   * @param integer $idUtilisateur Identifiant de l'utilisateur
   * @return object Utilisateur Remarque: si l'objet n'existe pas dans la base de
   *                                      données, il renvoie un objet avec des champs vides
   */
  public function getUnAvecId($idUtilisateur) {
    $arrUtilisateurs = $this->getQueryObject()->addWhere("id = ?", $idUtilisateur)->execute();

    return (!empty($arrUtilisateurs) ? $arrUtilisateurs[0] : (new Utilisateur()));
  }

  /**
   *  Récupère la liste des innovateurs reliés à un dossier MIP (pour affichage dans liste dossiers)
   * @param string $idDossierMip  identifiant du dossier MIP
   * @return Doctrine_collection  innovateurs liés au dossier
   * @author William RICHARDS
   */
  public function retrieveInnovateursByDossierMIP($idDossierMip) {
    $objRequeteDoctrine = $this->createQuery()
                    ->from('Utilisateur r')
                    ->innerjoin('r.Innovateur_dossier_mip i ON i.utilisateur_id = r.id')
                    ->where('i.dossier_mip_id = ?', $idDossierMip)
    ;
    return $objRequeteDoctrine->execute();
  }

  /**
   * Récupère le profil le plus haut niveau de l'utilisateur
   * @param string $intUtilisateurId ID de l'utilisateur
   * @param boolean $boolAvecAdministrateur false - prise en compte le profil administrateur
   * @return Profil
   * @author Gabor JAGER
   */
  public function retrieveProfilPlusHautByUtilisateurId($intUtilisateurId, $boolAvecAdministrateur = false) {
    $requete = $this->createQuery()
                    ->from('Profil p')
                    ->innerJoin('p.Metier m on p.metier_id = m.id')
                    ->innerJoin('p.Utilisateur_profil up on up.profil_id = p.id')
                    ->innerJoin('up.Utilisateur u on up.utilisateur_id = u.id')
                    ->where('u.id = ?', $intUtilisateurId)
                    ->orderBy('p.priorite ASC');

    if (!$boolAvecAdministrateur) {
      $requete->andWhere('m.intitule <> ?', MetierTable::ADMINISTRATEUR);
    }

    $arrProfils = $requete->execute();

    if ($arrProfils == null || count($arrProfils) == 0) {
      return null;
    }

    return $requete->execute()->get(0);
  }

  /**
   *  Génère la requête utilisée par le paginateur de la première liste dans l'onglet gérer les innovateurs d'un dossier MIP
   * @param string $strSessionToken   transaction_token correspondant aux opérations en cours
   * @param string $strDossierMipId   identifiant du dossier d'innovation concerné
   * @return Doctrine_query           requête à passer au paginateur
   * @author William RICHARDS
   */
  public function retrieveInnovateursMIPDisponibles($strSessionToken, $strDossierMipId) {
    $id = ProfilTable::getInstance()->getInnovateurProfilId();
    $objRequeteDoctrine = $this->createQuery('u')
                    ->innerJoin('u.Utilisateur_profil p on p.utilisateur_id = u.id')
                    ->where('p.profil_id = ?', $id)->andWhere('u.est_actif = 1')
                    ->leftJoin('u.Session_innovateur_dossier_mip s WITH s.innovateur_id = u.id and s.transaction_token = ?', $strSessionToken)
                    ->andWhere('s.nouveau_type_id is null OR s.transaction_token is null')
                    ->leftJoin('u.Innovateur_dossier_mip i on i.dossier_mip_id = ? and i.utilisateur_id = u.id', $strDossierMipId)
                    ->andWhere('i.utilisateur_id != u.id OR i.dossier_mip_id is null')
                    ->orWhere('s.nouveau_type_id is null AND NOT s.transaction_token is null')
    ;
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  /**
   *  Génère la requête utilisée pour la deuxième liste dans l'onglet gérer les innovateurs d'un dossier MIP
   * @param string $strSessionToken   transaction_token correspondant aux opérations en cours
   * @param string $strDossierMipId   identifiant du dossier d'innovation concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author William RICHARDS
   */
  public function retrieveInnovateursMIPConcernes($strSessionToken, $strDossierMipId) {
    $id = ProfilTable::getInstance()->getInnovateurProfilId();
    $objRequeteDoctrine = $this->createQuery('u')
                    ->innerJoin('u.Utilisateur_profil p on p.utilisateur_id = u.id')
                    ->where('p.profil_id = ?', $id)->andWhere('u.est_actif = 1')
                    ->leftJoin('u.Session_innovateur_dossier_mip s WITH s.innovateur_id = u.id and s.transaction_token = ?', $strSessionToken)
                    ->andWhere('NOT s.nouveau_type_id is null OR s.transaction_token is null')
                    ->leftJoin('u.Innovateur_dossier_mip i on i.utilisateur_id = u.id')
                    ->andWhere('i.dossier_mip_id = ? OR i.dossier_mip_id is null', $strDossierMipId)
                    ->andWhere('NOT (i.dossier_mip_id is null AND s.transaction_token is null)')
                    ->orWhere('NOT s.nouveau_type_id is null')

    ;
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  /**
   *
   * @return Doctrine_Query  requête récupérant les utilisateurs MIP
   */
  public function retrievePilotesPotentiels() {
    $idUSR = ProfilTable::getInstance()->getUtilisateurMipProfilId();
    $idSUP = ProfilTable::getInstance()->getSuperUtilisateurMipProfilId();
    $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Utilisateur_profil p with p.profil_id in (?,?)', array($idUSR, $idSUP));
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  public function retrieveAuteursRemarquesDossierMip($intDossierMipId) {
    $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Remarque_mip r ON r.created_by = u.id')
                    ->where('r.dossier_mip_id = ?', $intDossierMipId);
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  public function retrieveAuteursEvenementsDossierMip($intDossierMipId) {
    $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Evenement_mip r ON r.created_by = u.id')
                    ->where('r.dossier_mip_id = ?', $intDossierMipId);
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  public function retrieveAuteursRemarquesDossierMris($intDossierMrisId) {
    $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Remarque_mris r ON r.created_by = u.id')
                    ->orWhere('r.dossier_postdoc_id = ?', $intDossierMrisId)
                    ->orWhere('r.dossier_ere_id = ?', $intDossierMrisId)
                    ->orWhere('r.dossier_these_id = ?', $intDossierMrisId);
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  public function retrievePiloteActionDossierBpi($intDossierBpiId) {
    $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Action a ON a.pilote_id = u.id')
                    ->where('a.dossier_bpi_id = ?', $intDossierBpiId);
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  public function retrieveAuteursRemarquesDossierBpi($intDossierBpiId) {
    $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Remarque_bpi r ON r.created_by = u.id')
                    ->where('r.dossier_bpi_id = ?', $intDossierBpiId);
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  /**
   * Permet de récuperer les pilotes potentiels pour ajouter et modifier une action
   * @param myUser $Utilisateur
   * @return nom de l'utilisateur
   */
  public function retrievePilotePotentielActionDossierBpi(myUser $objUtilisateur) {
    $intIdUtilisateur = $objUtilisateur->getUtilisateur()->getId();
    if ($objUtilisateur->hasCredential("SUP-BPI")) {
      $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Utilisateur_profil p')
        ->where('p.profil_id = ?', ProfilTable::SUP_BPI)
        ->orWhere('p.profil_id = ? ', ProfilTable::USR_BPI);
      return $objRequeteDoctrine->orderBy('u.nom');
    }
    else if ($objUtilisateur->hasCredential("USR-BPI")) {
      $objRequeteDoctrine = $this->createQuery('u')
                      ->where('u.id = ?', $intIdUtilisateur);
      return $objRequeteDoctrine;
    } 
  }

  /**
   *  Génère la requête utilisée par le paginateur de la première liste dans l'onglet gérer les participants mindef d'une commission
   * @param string $strSessionToken   transaction_token correspondant aux opérations en cours
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête à passer au paginateur
   * @author William RICHARDS
   */
  public function retrieveParticipantsCommissionDisponibles($strSessionToken, $strCommissionId) {
    $objRequeteDoctrine = $this->createQuery('u')
                    ->where('u.est_actif = 1')
                    ->leftJoin('u.Session_participant_mindef_commission s WITH s.participant_id = u.id and s.transaction_token = ?', $strSessionToken)
                    ->andWhere('s.est_concerne = 0 OR s.transaction_token is null')
                    ->leftJoin('u.Commission_utilisateur i on i.commission_id = ? and i.utilisateur_id = u.id', $strCommissionId)
                    ->andWhere('i.utilisateur_id != u.id OR i.commission_id is null')
                    ->orWhere('s.est_concerne = 0')
    ;
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  /**
   *  Génère la requête utilisée pour la deuxième liste dans l'onglet gérer les participants mindef d'une commission
   * @param string $strSessionToken   transaction_token correspondant aux opérations en cours
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author William RICHARDS
   */
  public function retrieveParticipantsCommissionConcernes($strSessionToken, $strCommissionId) {
    $objRequeteDoctrine = $this->createQuery('u')
                    ->where('u.est_actif = 1')
                    ->leftJoin('u.Session_participant_mindef_commission s WITH s.participant_id = u.id and s.transaction_token = ?', $strSessionToken)
                    ->andWhere('s.est_concerne = 1 OR s.transaction_token is null')
                    ->leftJoin('u.Commission_utilisateur i on i.utilisateur_id = u.id')
                    ->andWhere('i.commission_id = ? OR i.commission_id is null', $strCommissionId)
                    ->andWhere('NOT (i.commission_id is null AND s.transaction_token is null)')
                    ->orWhere('s.est_concerne = ?', '1')
    ;
    return $objRequeteDoctrine->orderBy('u.nom');
  }

  /**
   * Génère la requête utilisée recuperer les participants mindef d'une commission
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author Gabor JAGER
   */
  public function getParticipantsByCommission($strCommissionId) {
    $objRequeteDoctrine = $this->createQuery('u')
                    ->where('u.est_actif = 1')
                    ->leftJoin('u.Commission_utilisateur i on i.utilisateur_id = u.id')
                    ->andWhere('i.commission_id = ?', $strCommissionId)
                    ->orderBy('u.nom, u.prenom')
    ;
    return $objRequeteDoctrine;
  }

  /**
   * Retourne les responsables BPI : Super utilisateur BPI et utilisateur BPI
   *
   * @return doctrine_query
   * @author Actimage
   */
  public function retrieveResponsableBpi() {

    $doctrineQuery = $this->createQuery('u')->innerJoin('u.Utilisateur_profil p')
                    ->where('p.profil_id = ?', ProfilTable::SUP_BPI)
                    ->orWhere('p.profil_id = ? ', ProfilTable::USR_BPI);

    return $doctrineQuery;
  }
  
  public function getSuperUtilisateursMris(){
    $doctrineQuery = $this->createQuery('u')->innerJoin('u.Utilisateur_profil p')
                      ->where('p.profil_id = ?', ProfilTable::SUP_MRIS)
                      ->andWhere('u.est_actif = true');
      return $doctrineQuery->execute();
  }

  /**
   * Ajoute le filtre par nom/prénom/email pour la recherches des innovateurs
   * @param Doctrine_Query $objRequeteDoctrine
   * @param string $strValeure
   * @author Actimage
   */
  public function appliquerFiltreNomPrenomEmail(Doctrine_Query $objRequeteDoctrine, $strValeure) {

    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine->andWhere('(u.nom LIKE ?', '%' . $strValeure . '%')
            ->orWhere($rootAlias . '.prenom LIKE ?', '%' . $strValeure . '%')
            ->orWhere($rootAlias . '.email LIKE ?' . ')', '%' . $strValeure . '%');


    return $objRequeteDoctrine;
  }

  /**
   * Ajoute le filtre téléphone pour la recherches des innovateurs
   * @param Doctrine_Query $objRequeteDoctrine
   * @param string $strValeure
   * @author Actimage
   */
  public function appliquerFiltreTelephone(Doctrine_Query $objRequeteDoctrine, $strValeure) {

    $rootAlias = $objRequeteDoctrine->getRootAlias();

    $objRequeteDoctrine->andWhere('(u.telephone_fixe LIKE ?', '%' . $strValeure . '%')
            ->orWhere($rootAlias . '.telephone_mobile LIKE ?', '%' . $strValeure . '%')
            ->orWhere($rootAlias . '.telephone_autre LIKE ?', '%' . $strValeure . '%')
            ->orWhere($rootAlias . '.telephone_fixe_perso LIKE ?', '%' . $strValeure . '%')
            ->orWhere($rootAlias . '.telephone_mobile_perso LIKE ?' . ')', '%' . $strValeure . '%');

    return $objRequeteDoctrine;
  }

  /**
   * Retourne les innovateurs en fonction d'un profil MIP : client_mip
   *
   * @return doctrine_query
   * @author Actimage
   */
  public function retrieveInnovateursByProfil(Doctrine_Query $objRequeteDoctrine, $MyUserCredentials) {

    //rootAlias de utilisateur
    $rootAlias = $objRequeteDoctrine->getRootAlias();

    //on vérifie si l'utilisateur est Super utilisateur MIP:
    if (in_array('SUP-MIP', $MyUserCredentials)) {

      $objRequeteDoctrine->innerJoin($rootAlias . '.Utilisateur_profil p')
              ->andWhere('p.profil_id = ?', ProfilTable::CLI_MIP)
      ;
    } else {
      $objRequeteDoctrine->andWhere($rootAlias . '.est_actif = 1')
              ->innerJoin($rootAlias . '.Utilisateur_profil p')
              ->andWhere('p.profil_id = ?', ProfilTable::CLI_MIP)
      ;
    }

    return $objRequeteDoctrine;
  }

  public function retrieveSuperUtilisateursByMetierId($strMetierId) {
    $strMetier = MetierTable::getInstance()->findOneById($strMetierId);
    $intProfilSuperUtilisateurId = 0;
    $arrProfils = ProfilTable::getInstance()->getProfilsDuMetierIntitule($strMetier);
    if ($arrProfils->count() > 0) {
      foreach ($arrProfils as $profil) {
        if ($profil->getCode() == 'SUP') {
          $intProfilSuperUtilisateurId = $profil->getId();
        }
      }
    }
    $objRequeteDoctrine = $this->createQuery('u')->innerJoin('u.Utilisateur_profil p')
                    ->where('p.profil_id = ?', $intProfilSuperUtilisateurId);

    return $objRequeteDoctrine->execute();
  }

  /**
   * Recupere les correspondances LDAP dans un array
   *
   * @param array $arrInformationsLdap Array de correspondances LDAP declaré dans app.yml
   * @return array Un array de type: array('nom_colonne_GRID'=>'valeur')
   *
   * @author Simeon PETEV
   */
  public static function recupereCorrespondances($arrInformationsLdap=array())
  {
    $arrResulataCorrespondances = array(
        'prenom'              =>  '',
        'nom'                 =>  '',
        'email'               =>  '',
        'adresse_perso'       =>  '',
        'ville_perso_id'      =>  '',
        'entite_id'           =>  '',
        'organisme_mindef_id' =>  '',
        'grade_id'            =>  '',
        'civilite_id'         =>  '',
		'code_postal_perso'	  =>  ''
    );

    if (isset ($arrInformationsLdap['prenom']))
    {
      $arrResulataCorrespondances['prenom'] = $arrInformationsLdap['prenom'];
    }

    if (isset ($arrInformationsLdap['nom']))
    {
      $arrResulataCorrespondances['nom'] = $arrInformationsLdap['nom'];
    }

    if (isset ($arrInformationsLdap['mail']))
    {
      $arrResulataCorrespondances['email'] = $arrInformationsLdap['mail'];
    }

    if (isset ($arrInformationsLdap['adresse']))
    {
      $arrResulataCorrespondances['adresse_perso'] = $arrInformationsLdap['adresse'];
    }

    if (isset ($arrInformationsLdap['ville']))
    {
      $objVille = VilleTable::getInstance()->findOneByNom($arrInformationsLdap['ville']);
	  // Patch extension de ville
	  if($objVille == null && ereg(' - ', $arrInformationsLdap['ville']))
	  {
		$objVille = VilleTable::getInstance()->findOneByNom(substr($arrInformationsLdap['ville'], 0, strpos($arrInformationsLdap['ville'], ' - ')));
	  }
	  
      if ($objVille)
      {
        $arrResulataCorrespondances['ville_perso_id'] = $objVille->getId();
      }
    }

    if (isset ($arrInformationsLdap['Entite']))
    {
      $objEntite = EntiteTable::getInstance()->findOneByIntitule($arrInformationsLdap['Entite']);

      if ($objEntite)
      {
        $arrResulataCorrespondances['entite_id'] = $objEntite->getId();
      }
    }

    if (isset ($arrInformationsLdap['Organisme_mindef']))
    {
      $objOrganisme = Organisme_mindefTable::getInstance()->findOneByAbreviation($arrInformationsLdap['Organisme_mindef']);

      if ($objOrganisme)
      {
        $arrResulataCorrespondances['organisme_mindef_id'] = $objOrganisme->getId();
      }
    }

    if (isset ($arrInformationsLdap['Grade']))
    {
      $objGrade = GradeTable::getInstance()->findOneByIntitule($arrInformationsLdap['Grade']);

      if ($objGrade)
      {
        $arrResulataCorrespondances['grade_id'] = $objGrade->getId();
      }
    }

    if (isset ($arrInformationsLdap['Civilite']))
    {
      if (strcasecmp($arrInformationsLdap['Civilite'], 'Melle') == 0)
      {
        $arrInformationsLdap['Civilite'] = 'Mlle';
      }
	  if (strcasecmp($arrInformationsLdap['Civilite'], 'Mr') == 0)
      {
        $arrInformationsLdap['Civilite'] = 'M';
      }

      $objCivilite = CiviliteTable::getInstance()->findOneByAbreviation($arrInformationsLdap['Civilite']);

      if ($objCivilite)
      {
        $arrResulataCorrespondances['civilite_id'] = $objCivilite->getId();
      }
    }
	
	if (isset ($arrInformationsLdap['CodePostal']))
    {
      $arrResulataCorrespondances['code_postal_perso'] = $arrInformationsLdap['CodePostal'];
    }

    return $arrResulataCorrespondances;
  }

}