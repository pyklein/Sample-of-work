<?php

/**
 * InvitationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class InvitationTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object InvitationTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Invitation');
  }

  /**
   * Génère la requête utilisée recuperer les intervenants d'une commission
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author Gabor JAGER
   */
  public function getInvitationsByCommission($strCommissionId)
  {
    $objRequeteDoctrine = $this->createQuery('i')
                               ->leftJoin('i.Service s on i.service_id = s.id')
                               ->leftJoin('i.Laboratoire l on i.laboratoire_id = l.id')
                               ->andWhere('i.commission_id = ?', $strCommissionId)
                               ->orderBy('s.intitule, l.intitule')
            ;
    return $objRequeteDoctrine;
  }

  /**
   * Génère la requête utilisée recuperer les invitations services d'une commission
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author Gabor JAGER
   */
  public function getInvitationsServiceByCommission($strCommissionId)
  {
    $objRequeteDoctrine = $this->createQuery('i')
                               ->leftJoin('i.Service s on i.service_id = s.id')
                               ->andWhere('i.commission_id = ?', $strCommissionId)
                               ->andWhere('i.service_id IS NOT NULL')
                               ->orderBy('s.intitule')
            ;
    return $objRequeteDoctrine;
  }

  /**
   * Génère la requête utilisée recuperer les invitations services d'une commission
   * @param string $strCommissionId   identifiant de la commission concerné
   * @return Doctrine_query           requête obtenant la liste correcte
   * @author Gabor JAGER
   */
  public function getInvitationsLaboratoireByCommission($strCommissionId)
  {
    $objRequeteDoctrine = $this->createQuery('i')
                               ->leftJoin('i.Laboratoire l on i.laboratoire_id = l.id')
                               ->andWhere('i.commission_id = ?', $strCommissionId)
                               ->andWhere('i.laboratoire_id IS NOT NULL')
                               ->orderBy('l.intitule')
            ;
    return $objRequeteDoctrine;
  }

  /**
   * Génère la requête utilisée pour la liste des invités dans l'onglet gérer les invitations d'une commission
   * @param string $strSessionToken transaction_token correspondant aux opérations en cours
   * @param string $strCommissionId identifiant de la commission concerné
   * @return array[laboratoire] objet Laboratoire (si c'est un laboratoire, sinon null)
   *         array[laboratoire_id] id de Laboratoire (si c'est un laboratoire, sinon null)
   *         array[service] objet Service (si c'est un service, sinon null)
   *         array[service_id] id de Service (si c'est un service, sinon null)
   *         array[invitation] objet Invitation (si c'est un invitation, sinon null)
   *         array[invitation_id] id de Invitation (si c'est un invitation, sinon null)
   * @author Gabor JAGER
   */
  public function retrieveCommissionInvites($strSessionToken, $strCommissionId)
  {

    $arrServiceFiltre = array();

    // on supprime les invitations "pas concernés" de la table de session
    $arrInvitationsPasConcernes = Session_invitation_commissionTable::getInstance()->getSessionsInvitationsPasConcernesByToken($strSessionToken);
    foreach ($arrInvitationsPasConcernes as $objSession)
    {
      $arrServiceFiltre[$objSession->getInvitationId()] = $objSession->getInvitationId();
    }

    $objConnexion = Doctrine_Manager::connection();
    $strSql = "
      SELECT service_id, laboratoire_id, id AS invitation_id
      FROM invitation
      WHERE commission_id = '".$strCommissionId."'
        ";

    if (count($arrServiceFiltre) > 0)
    {
      $strSql .= ' AND id NOT IN ('.implode(",", $arrServiceFiltre).')';
    }

    $strSql .= "
      UNION
      SELECT service_id, laboratoire_id, NULL
      FROM session_invitation_commission
      WHERE transaction_token = '".$strSessionToken."'
        AND est_concerne = '1'
      ";

    $arrResultat = $objConnexion->fetchAssoc($strSql);

    $arrRetour = array();
    foreach($arrResultat as $intI => $arrLigne)
    {
      $arrRetourLigne = array();
      if ($arrLigne["invitation_id"])
      {
        $arrRetourLigne["invitation"]["objet"] = InvitationTable::getInstance()->findOneById($arrLigne["invitation_id"]);

        if ($arrRetourLigne["invitation"]["objet"]->estLaboratoire())
        {
          $arrRetourLigne["invitation"]["laboratoire"] = $arrRetourLigne["invitation"]["objet"]->getLaboratoire();
        }
        else
        {
          $arrRetourLigne["invitation"]["service"] = $arrRetourLigne["invitation"]["objet"]->getService();
        }
        
        $arrRetourLigne["invitation_id"] = $arrLigne["invitation_id"];
        $arrRetourLigne["service"] = null;
        $arrRetourLigne["service_id"] = null;
        $arrRetourLigne["laboratoire"] = null;
        $arrRetourLigne["laboratoire_id"] = null;
      }
      else if ($arrLigne["service_id"])
      {
        $arrRetourLigne["service"] = ServiceTable::getInstance()->findOneById($arrLigne["service_id"]);
        $arrRetourLigne["service_id"] = $arrLigne["service_id"];
        $arrRetourLigne["invitation"] = null;
        $arrRetourLigne["invitation_id"] = null;
        $arrRetourLigne["laboratoire"] = null;
        $arrRetourLigne["laboratoire_id"] = null;
      }
      else
      {
        $arrRetourLigne["laboratoire"] = LaboratoireTable::getInstance()->findOneById($arrLigne["laboratoire_id"]);
        $arrRetourLigne["laboratoire_id"] = $arrLigne["laboratoire_id"];
        $arrRetourLigne["invitation"] = null;
        $arrRetourLigne["invitation_id"] = null;
        $arrRetourLigne["service"] = null;
        $arrRetourLigne["service_id"] = null;
      }
      $arrRetour[] = $arrRetourLigne;
    }

    return $arrRetour;
  }

  /**
   * Enregistre de manière effective les informations recoltées dans la table support Session_invitation_commissionTable vers InvitationTable
   * @param string $strTransactionToken       transaction_token des opérations à sauvegarder
   * @param string $strCommissionId           identifiant de la commission traintée
   * @param Utilisateur $objUtilisateur       utilisateur effectuant les opérations
   */
  public function enregistrerModificationSession($strTransactionToken, $strCommissionId, Utilisateur $objUtilisateur)
  {
    $arrEtatSession = Session_invitation_commissionTable::getInstance()->retrieveEtatSession($strTransactionToken);

    $connection = $this->getConnection();
    $connection->beginTransaction();

    // L'enregistrement de ces informations se fait en une seule transaction
    try
    {
      foreach ($arrEtatSession as $objEnregistrement)
      {
        // cas : invitation à supprimer
        if ($objEnregistrement->getInvitationId()
                && !$objEnregistrement->getEstConcerne())
        {
          $objInvitation = $objEnregistrement->getInvitation();
          $objInvitation->delete();
        }

        // cas : ajouter un service
        else if ($objEnregistrement->getServiceId()
                && $objEnregistrement->getEstConcerne())
        {
          $objInvitation = new Invitation();
          $objInvitation->setCommissionId($strCommissionId);
          $objInvitation->setServiceId($objEnregistrement->getServiceId());
          $objInvitation->save();
        }

        // cas : ajouter un laboratoire
        else if ($objEnregistrement->getLaboratoireId()
                && $objEnregistrement->getEstConcerne())
        {
          $objInvitation = new Invitation();
          $objInvitation->setCommissionId($strCommissionId);
          $objInvitation->setLaboratoireId($objEnregistrement->getLaboratoireId());
          $objInvitation->save();
        }
        
        // nettoyage de la table support
        $objEnregistrement->delete();
      }

      $connection->commit();

    }
    catch (Exception $ex)
    {
      $connection->rollBack();
      throw $ex;
    }
  }
}
