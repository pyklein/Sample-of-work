<?php

/**
 * Innovateur_dossier_mipTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Innovateur_dossier_mipTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return object Innovateur_dossier_mipTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Innovateur_dossier_mip');
  }

  /**
   *  Retourne les identifiants des innovateurs pour un dossier
   * @param string $strDossierId identifiant du dossier
   * 
   */
  public function getInnovateurParDossierId($strDossierId) {
    $resultat = $this->createQuery('i')->where('i.dossier_mip_id = ?', $strDossierId)->execute();
    return $resultat;
  }

  /**
   *  Retourne l'enregistrement concernant l'implication d'un innovateur donnée pour un dossier MIP donnée
   * @param string $strInnovateurId   Identifiant de l'innovateur
   * @param string $strDossierId      Identifiant du dossier MIP
   * @return Doctrine_collection      Résultats de la requête (0 ou 1 enregistrement si base cohérente)
   */
  public function getByDossierAndInnovateur($strDossierId,$strInnovateurId) {
    return $this->createQuery('i')->where('i.dossier_mip_id = ?', $strDossierId)->andWhere('i.utilisateur_id = ?', $strInnovateurId)->execute();
  }

  /**
   *  Enregistre de manière effective les informations recoltées dans la table support session_innovateur_dossier_mip vers innovateur_dossier_mip
   * @param string $strTransactionToken       transaction_token des opérations à sauvegarder
   * @param string $strInnovateurPrincipalId  identifiant du nouvel innovateur principal
   * @param string $strDossierId              identifiant du dossier MIP traité
   * @param Utilisateur $objUtilisateur       utilisateur effectuant les opérations
   */
  public function enregistrerModificationSession($strTransactionToken, $strDossierId, Utilisateur $objUtilisateur) {
    $objEtatSession = Session_innovateur_dossier_mipTable::getInstance()->retrieveEtatSession($strTransactionToken);

    $connection = $this->getConnection();
    $connection->beginTransaction();
    //L'enregistrement de ces informations se fait en une seule transaction
    try {
      foreach ($objEtatSession as $objEnregistrement) {
        $strInnovateurId = $objEnregistrement->getInnovateurId();
        $objDossierInnovateur = $this->getByDossierAndInnovateur($strDossierId,$strInnovateurId);

        //cas : Innovateur non concerné au début des opérations d'affectations
        if ($objDossierInnovateur->count() == 0) {
          //cas : Innovateur concerné après les opérations (on ne fait rien si non concerné)
          if ($objEnregistrement->getNouveauTypeId() != null) {
            $objNouvelInnovateurDossierMIP = new Innovateur_dossier_mip();
            $objNouvelInnovateurDossierMIP->setDossierMipId($strDossierId);
            $objNouvelInnovateurDossierMIP->setUtilisateurId($strInnovateurId);
            $objNouvelInnovateurDossierMIP->setTypeInnovateurId($objEnregistrement->getNouveauTypeId());

            $objNouvelInnovateurDossierMIP->save();
          }
          //cas : Innovateur concerné au début des opérations
        } else {
          //cas : Innovateur non concerné après les opérations -> suppression de l'enregistrement innovateur_dossier_mip
          if ($objEnregistrement->getNouveauTypeId() == null) {
            $objDossierInnovateur->delete();
          } else {
            //cas: Changement possible du statut Est_principal
            $objDossierInnovateur->setTypeInnovateurId($objEnregistrement->getNouveauTypeId());
            $objDossierInnovateur->save();
          }
        }
        //nettoyage de la table support
        $objEnregistrement->delete();
      }
      $objDossier = Dossier_mipTable::getInstance()->findOneById($strDossierId);
      $objDossier->save();
      $connection->commit();
    } catch (Exception $ex) {
      $connection->rollBack();
      throw $ex;
    }
  }

}